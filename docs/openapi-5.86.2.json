{
  "openapi": "3.0.0",
  "info": {
    "title": "Open Loyalty",
    "description": "OpenLoyalty REST API\n# Authentication\n<!-- Redoc-Inject: <security-definitions> -->\n",
    "version": "",
    "x-logo": {
      "url": "https://docs.openloyalty.io/en/latest/_static/images/openloyalty.png",
      "backgroundColor": "#47388C",
      "altText": "Open Loyalty"
    }
  },
  "servers": [
    {
      "url": "http://openloyalty.localhost"
    }
  ],
  "paths": {
    "/api/acl/role/{role}": {
      "get": {
        "tags": [
          "ACL"
        ],
        "summary": "Get role details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all Role details.\n",
        "operationId": "aclGetRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/role"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "ACL"
        ],
        "summary": "Modify role",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows modifying specific Role.\n",
        "operationId": "aclPutRole",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/RoleFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "ACL"
        ],
        "summary": "Delete role",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deleting specific Role.\n",
        "operationId": "aclDeleteRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/role"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/acl/accesses": {
      "get": {
        "tags": [
          "ACL"
        ],
        "summary": "Get permission accesses",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns available permission accesses.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "aclGetAccesses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AclAvailableObject"
                      }
                    },
                    "total": {
                      "properties": {
                        "all": {
                          "example": 0
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/acl/role": {
      "get": {
        "tags": [
          "ACL"
        ],
        "summary": "Get roles list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all Roles that have been created in the system.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "aclGetList",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "master",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "ACL"
        ],
        "summary": "Add a new role",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Role in the system.\n",
        "operationId": "aclPostRole",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/RoleFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/NoContent"
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/acl/resources": {
      "get": {
        "tags": [
          "ACL"
        ],
        "summary": "Get resources list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all available permission resources in the system that you can dedicate to a specific Role.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "aclGetResources",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AclAvailableObject"
                      }
                    },
                    "total": {
                      "properties": {
                        "all": {
                          "example": "0"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/data/{admin}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get admin details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all specific Admin details.\n",
        "operationId": "adminGetData",
        "parameters": [
          {
            "$ref": "#/components/parameters/admin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminInternal"
                    },
                    {
                      "$ref": "#/components/schemas/AdminExternal"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update admin details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating specific Admin data.\n",
        "operationId": "adminPutData",
        "parameters": [
          {
            "$ref": "#/components/parameters/admin"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AdminWithApiKey"
                  },
                  {
                    "$ref": "#/components/schemas/AdminWithPlainPassword"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          }
        }
      }
    },
    "/api/admin": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get admins list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all Admins that have been created in the system.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "adminGetList",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminExternalList"
                    },
                    {
                      "$ref": "#/components/schemas/AdminInternalList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/permissions": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get admin permissions",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all permissions information for current logged in Admin.\n",
        "operationId": "adminGetPermissions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPermissions"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/data": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Add a new admin",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Admin in the system.\nThe required fields are dependent on the value of the \"external\" field.\nIf the value of the \"external\" field is set to false, then it is required to provide the value for the \"plainPassword\" field.\nOtherwise, it is required to provide a value for the \"apiKey\" field.\n",
        "operationId": "adminPostData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AdminWithApiKey"
                  },
                  {
                    "$ref": "#/components/schemas/AdminWithPlainPassword"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/admin/{admin}/settings": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get admin settings",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns the settings of the specified Admin.\n",
        "operationId": "settingsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/admin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsEntry"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/admin/{admin}/settings/{key}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update admin\u2019s API key",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows you to add or modify specific Administrator settings.\n",
        "operationId": "settingsPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/admin"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettingsEntryFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/admin/password": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Changged logged admin\u2019s password",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows changing the password of the logged Admin.\n",
        "operationId": "adminPutPassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "currentPassword",
                  "plainPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "plainPassword": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/password/reset": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Set a new password",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows you to set a new password when a password reset is requested.\n",
        "operationId": "adminPostPasswordReset",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "reset"
                ],
                "properties": {
                  "reset": {
                    "$ref": "#/components/schemas/PasswordResetFormType"
                  },
                  "token": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/password/reset/request": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Request password reset",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method sends a message to the Admin with a password reset URL.\n",
        "operationId": "adminPostPasswordResetRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/levels": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Tiers analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about all Tiers.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "tierStatsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TierStats"
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/members": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Members analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns information about total count of Members registered in the system.\n",
        "operationId": "membersStatsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "withTransaction",
            "in": "query",
            "description": "Show only members who had at least one transaction (true) or had no transactions (false). Omit for all members.",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "intervals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MembersStats"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "example": 594
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/points": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Units analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns information about the total number of Points spent, expired, blocked, pending, and all active Points.\n",
        "operationId": "pointsStatsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointsStats"
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/referrals": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Referrals analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns information about the total number of Members referred by another.\n",
        "operationId": "referralsStatsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 432
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/transactions": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Transactions analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns information about total Transactions count, total amount with and without delivery costs, and currency.\n",
        "operationId": "transactionsStatsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionsStats"
                  }
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/campaigns": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Campaigns analytics",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "campaignsExecutionsGet",
        "parameters": [
          {
            "name": "executedAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "name": "_orderBy",
            "in": "query",
            "description": "Can be ordered by `executions` field.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaigns executions",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CampaignsExecutions"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/audit/log": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get all audit logs",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all actions logged in system logs.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "auditLogGetList",
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auditLogId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "name": "_orderBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuditLog"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/audit/log/archive/{filename}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audit log archive",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method exports Audit Log archive.\n",
        "operationId": "auditLogArchiveGet",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/audit/log/archive": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audit log archives list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method exports Audit Log archives file list.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "auditLogArchiveGetList",
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Audit"
        ],
        "summary": "Create a new audit log archive",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method creates a new Audit Log archive.\n",
        "operationId": "auditLogArchivePost",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archive": {
                    "$ref": "#/components/schemas/ArchiveFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TotalLogsArchived"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/audit/log/export": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Export audit log",
        "description": "This method exports Audit Log.\n",
        "operationId": "auditLogExportGet",
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Event type",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Entity ID",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity Type",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "auditLogId",
            "in": "query",
            "description": "audit log ID",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "created at from",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sorting direction",
            "required": false,
            "schema": {
              "type": "string",
              "format": "asc|desc"
            }
          },
          {
            "name": "_page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "name": "_orderBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "text"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/campaign/{campaign}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get the campaign\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about a specific Campaign.\n",
        "operationId": "campaignGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign details.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CampaignResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MultiReferralCampaignResponse"
                    },
                    {
                      "$ref": "#/components/schemas/UniqueCodeCampaignResponse"
                    },
                    {
                      "$ref": "#/components/schemas/TimeTriggerCampaignResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update campaign\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows changing the information about a specific Campaign.\n",
        "operationId": "_campaignPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AchievementCampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/PutUniqueCodeCampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/MultiReferralCampaignRequestBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Delete campaign.",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows you to delete campaign.\n",
        "operationId": "_campaignDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update campaign\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows you to change the order in which your campaigns are displayed.\n",
        "operationId": "campaignPatch",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDisplayOrder"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/channel/{channel}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get channel\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about specific Sales Channel in the system.\n",
        "operationId": "channelGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/channel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel2"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Update channel configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows update specific Sales Channel data.\n",
        "operationId": "channelPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/channel"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/EditChannelFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "channelId": {
                      "description": "Channel Id",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete a channel",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deleting specific Sales Channel.\n",
        "operationId": "channelDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/channel"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/channel": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get channels list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a complete list of the Sales Channels that exist in the system.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "channelGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "name": "_orderBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Channel"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Add a channel",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Sales Channel in the system.\n",
        "operationId": "channelPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/CreateChannelFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "channelId": {
                      "description": "Channel Id",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/custom-attribute": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update member\u2019s custom attribute",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows updating Custom Attributes that are added to a specific Member.\n",
        "operationId": "customAttributePut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomAttributeFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete member\u2019s custom attribute",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows deleting Custom Attributes that are added to a specific Member.\n",
        "operationId": "customAttributeDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCustomAttributeFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/customEvent/schema/{customEventSchema}": {
      "get": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Get custom event schema",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about specific Custom Event Schema in the system.\n",
        "operationId": "customEventSchemaGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/customEventSchema"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEventSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Update custom event schema configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating a specific Custom Event Schema.\n",
        "operationId": "customEventSchemaPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/customEventSchema"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customEventSchema": {
                    "required": [
                      "schema",
                      "name"
                    ],
                    "properties": {
                      "schema": {
                        "$ref": "#/components/schemas/SchemaFormType"
                      },
                      "name": {
                        "description": "Name of the event",
                        "type": "string"
                      },
                      "active": {
                        "required": [
                          "isActive"
                        ],
                        "properties": {
                          "isActive": {
                            "description": "Indicates if the event is active",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/customEvent/schema": {
      "get": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Get custom event schema list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a complete list of the Custom Event Schemas that exist in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "customEventSchemaGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomEventSchema"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Add a custom event schema",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Custom Event Schemas in the system.\n",
        "operationId": "customEventSchemaPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customEventSchema": {
                    "required": [
                      "eventType",
                      "schema",
                      "name"
                    ],
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "schema": {
                        "$ref": "#/components/schemas/SchemaFormType"
                      },
                      "name": {
                        "description": "Name of the event",
                        "type": "string"
                      },
                      "active": {
                        "required": [
                          "isActive"
                        ],
                        "properties": {
                          "isActive": {
                            "description": "Indicates if the event is active",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/customEvent/schema/{eventType}/active": {
      "post": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Set custom event schema as active",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows changing activity for a specific Custom Event Schema.\n",
        "operationId": "customEventSchemaActivePut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/eventType"
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "active"
                ],
                "properties": {
                  "active": {
                    "description": "If the schema should be active",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/dashboard/general-overview": {
      "get": {
        "tags": [
          "Data Analytics"
        ],
        "summary": "Retrieve general overview",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThe endpoint is used to retrieve a general overview of the analytics dashboard.\nTo use the endpoint, you must provide a \"dataType\" parameter that specifies the type of data you want to retrieve.\nAdditionally, you can provide optional query parameters to filter the data.\n\nYou can specify an \"aggregationType\" parameter to group the data by day, week, month, or year. You can also specify an \"intervalStartDate\" and \"intervalEndDate\" parameter to retrieve data for a specific time range.\n\nIf you don't specify the \"aggregationType\" parameter, aggregation will be based on interval:\n\n- 1-30 - days daily aggregation\n- 31-90 - days weekly aggregation\n- 91-360 - days monthly aggregation\n- over 360 - days annual aggregation\n\nIf you don't provide any optional query parameters and don't specify an interval, it will return all data from the beginning to today.\n",
        "operationId": "dataAnalyticsGetGeneralOverview",
        "parameters": [
          {
            "name": "dataType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "registeredMembers",
                "revenue",
                "avgSpending",
                "transactions",
                "avgTransactionValue",
                "avgNumberOfTransactions"
              ]
            }
          },
          {
            "name": "aggregationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "intervalStartDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "intervalEndDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Data for general overview dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GeneralOverview"
                    },
                    {
                      "properties": {
                        "aggregationType": {
                          "type": "string",
                          "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                          ]
                        },
                        "dataType": {
                          "type": "string",
                          "enum": [
                            "registeredMembers",
                            "revenue",
                            "avgSpending",
                            "transactions",
                            "avgTransactionValue",
                            "avgNumberOfTransactions",
                            "activeMembers"
                          ]
                        }
                      },
                      "type": "object",
                      "property": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/units-overview/{walletTypeCode}": {
      "get": {
        "tags": [
          "Data Analytics"
        ],
        "summary": "Retrieve units overview",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThe endpoint is used to retrieve a units overview of the analytics dashboard.\n\nYou can specify an \"aggregationType\" parameter to group the data by day, week, month, or year. You can also specify an \"intervalStartDate\" and \"intervalEndDate\" parameter to retrieve data for a specific time range.\n\nIf you don't specify the \"aggregationType\" parameter, aggregation will be based on interval:\n\n- 1-30 - days daily aggregation\n- 31-90 - days weekly aggregation\n- 91-360 - days monthly aggregation\n- over 360 - days annual aggregation\n\nIf you don't provide any optional query parameters and don't specify an interval, it will return all data from the beginning to today.\n",
        "operationId": "dataAnalyticsGetUnitsOverview",
        "parameters": [
          {
            "name": "aggregationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "dataType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "unitsIssued",
                "unitsSpent",
                "unitsExpired",
                "unitsPending",
                "unitsActive",
                "redemptionRate",
                "breakageRate"
              ]
            }
          },
          {
            "name": "intervalStartDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "intervalEndDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "walletTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for units overview dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnitsOverview"
                    },
                    {
                      "properties": {
                        "aggregationType": {
                          "type": "string",
                          "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                          ]
                        },
                        "dataType": {
                          "type": "string",
                          "enum": [
                            "unitsIssued",
                            "unitsSpent",
                            "unitsExpired",
                            "unitsPending",
                            "unitsActive",
                            "redemptionRate",
                            "breakageRate"
                          ]
                        }
                      },
                      "type": "object",
                      "property": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/healthcheck": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Check system status",
        "description": "<label style=\"background-color: #E7E7E7;padding:5px;\">System</label><br><br>\nThis method returns the system status.\n",
        "operationId": "healthCheckGet",
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/api/": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Check application version",
        "description": "<label style=\"background-color: #E7E7E7;padding:5px;\">System</label><br><br>\nThis method returns the application version.\n",
        "operationId": "healthCheckGetVersion",
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "OpenLoyalty"
                    },
                    "version": {
                      "type": "string",
                      "example": "5.0.0"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/language/{code}": {
      "get": {
        "tags": [
          "Language"
        ],
        "summary": "Get language data",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all Language data by its locale code.\n",
        "operationId": "languageGet",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Language"
        ],
        "summary": "Update language configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating a specific Language.\n",
        "operationId": "languagePut",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageDataFormType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "apiDefault": {
                      "type": "boolean"
                    },
                    "adminDefault": {
                      "type": "boolean"
                    },
                    "order": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Language"
        ],
        "summary": "Delete a language",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deleting a specific Language.\n",
        "operationId": "languageDelete",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/language": {
      "get": {
        "tags": [
          "Language"
        ],
        "summary": "Get languages list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all available Languages in the system.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "languageGetList",
        "parameters": [
          {
            "name": "localeCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiDefault",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LanguageData"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Language"
        ],
        "summary": "Add a language",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Language.\n",
        "operationId": "languagePost",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLanguageFormType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "apiDefault": {
                      "type": "boolean"
                    },
                    "adminDefault": {
                      "type": "boolean"
                    },
                    "order": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/language/{code}/translation/{key}": {
      "put": {
        "tags": [
          "Language"
        ],
        "summary": "Update translation key",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating or updating a whole specific Translation key.\n",
        "operationId": "languageTranslationPut",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "translation": {
                    "$ref": "#/components/schemas/TranslationEntryDataFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "languageCode": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/translation": {
      "get": {
        "tags": [
          "Language"
        ],
        "summary": "Get translations list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all Translations.\n",
        "operationId": "translationGet",
        "parameters": [
          {
            "name": "_locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/translation/key/{key}": {
      "get": {
        "tags": [
          "Language"
        ],
        "summary": "Get translation key details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns one Translation key and its value in all Languages supported.\n",
        "operationId": "translationGetKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TranslationEntry"
                      },
                      {
                        "properties": {
                          "languageCode": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/translation/key": {
      "get": {
        "tags": [
          "Language"
        ],
        "summary": "Get translation keys list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of Translation keys available in at least one Language.\n",
        "operationId": "translationGetKeyList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/reward/redeem": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Mark coupon as used",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows redeeming a Coupon that is assigned to a specific Member (marks it as used by the Administrator).\n",
        "operationId": "rewardPostRedeem",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedeemCouponFormType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponUsageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/reward/reissue": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Mark coupon as unused",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows reissuing a Coupon that is assigned to a specific Member (marks it as unused by the Administrator).\n",
        "operationId": "rewardPostReissue",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReissueCouponFormType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponUsageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/avatar": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get member\u2019s avatar",
        "description": "This method returns the avatar of the Member.\n",
        "operationId": "memberGetAvatar",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns avatar file",
            "content": {
              "image": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Add member\u2019s avatar",
        "description": "This method allows uploading the avatar to the Member.\n",
        "operationId": "memberPostAvatar",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "avatar": {
                    "$ref": "#/components/schemas/AvatarFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete member\u2019s avatar",
        "description": "This method allows removing the avatar of the Member.\n",
        "operationId": "memberDeleteAvatar",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member/{member}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get member\u2019s details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns details related to a specific Member account.\n",
        "operationId": "memberGet",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Member details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Customer"
                    },
                    {
                      "properties": {
                        "labels": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "property": null
                              }
                            ]
                          }
                        },
                        "currency": {
                          "type": "string"
                        },
                        "storeCode": {
                          "type": "string"
                        },
                        "segments": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "channelIdentifier": {
                          "type": "string"
                        },
                        "currentLevel": {
                          "$ref": "#/components/schemas/CurrentLevel"
                        }
                      },
                      "type": "object",
                      "property": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update member\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating data related to a specific Member account.\nIf a member changes the primary identification method then this change has to be confirmed.\nConfirmation works only for email and phone fields.\nIf CustomerEmailWasChanged or CustomerPhoneNumberWasChanged webhook is configured,\nthe code, code number, and member contact data will be transmitted.\nField code from the webhook has to be used as token parameter in endpoint. [confirm change](#operation/memberPostConfirmChange)\n",
        "operationId": "memberPut",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customer": {
                    "$ref": "#/components/schemas/PutMember"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated member id.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customerId": {
                      "description": "Updated member identity",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete a member",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a specific Member account.\n",
        "operationId": "memberDeleteMember",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/check": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Find if the member registered",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns true or false if a Member with give phone number or email exists.\n",
        "operationId": "memberGetCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "emailOrPhone",
            "in": "query",
            "description": "This filter is deprecated. Use identifier instead",
            "required": false,
            "deprecated": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Using this parameter you can filter by e-mail, by phone, by customer id or loyalty card number",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true or false if given email or phone exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/export/csv": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Export members list",
        "description": "This method exports all Members' accounts exist in the system.\n",
        "operationId": "memberGetExport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "firstName",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "lastName",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "phone",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "emailOrPhone",
            "in": "query",
            "description": "email or phone",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "loyaltyCardNumber",
            "in": "query",
            "description": "loyaltyCardNumber",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of elements per page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exports members in CSV file."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get members list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns list of all Members' accounts exist in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "memberGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailOrPhone",
            "in": "query",
            "description": "This filter is deprecated. Use identifier instead",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Using this parameter you can filter by e-mail, by phone, by customer id or loyalty card number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gender",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loyaltyCardNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "birthDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "agreement1",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "agreement2",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "agreement3",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "registeredAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "transactionsCount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "transactionsAmount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "transactionsAmountWithoutDeliveryCosts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountExcludedForLevel",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "averageTransactionAmount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "levelAchievementDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastTransactionDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "firstTransactionDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "manuallyAssignedLevelId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referralToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:street",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:address1",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:address2",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:province",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:city",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:postal",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address:country",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultAccount:activePoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:transferredPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:lockedPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:expiredPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:spentPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:earnedPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "defaultAccount:blockedPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Customer"
                          },
                          {
                            "properties": {
                              "labels": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object",
                                      "property": null
                                    }
                                  ]
                                }
                              },
                              "currency": {
                                "type": "string"
                              },
                              "storeCode": {
                                "type": "string"
                              },
                              "channelIdentifier": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "property": null
                          }
                        ]
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Add a member",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows registering a new Member as an Admin.\n",
        "operationId": "memberPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customer": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomerRegistrationFormType"
                      },
                      {
                        "properties": {
                          "levelId": {
                            "description": "Assign member to tier",
                            "type": "string",
                            "format": "uuid"
                          },
                          "address": {
                            "$ref": "#/components/schemas/CustomerAddressFormType2"
                          },
                          "company": {
                            "allOf": [
                              {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "nip": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "property": null
                              }
                            ]
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return registered member id and email.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customerId": {
                      "description": "Registered member identity",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "email": {
                      "description": "Registered member email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/registrations": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get number of registered members",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns the number of Members that have been registered in the system.\n",
        "operationId": "memberGetRegistrations",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "lastDays",
            "in": "query",
            "description": "Range from last X days",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": "30"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Group by interval",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "format": "day|month|year",
              "default": "day",
              "pattern": "(day|month|year)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "format": "date-time",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/status": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get member\u2019s loyalty status",
        "description": "This method returns all the details related to a specific Member about Points, Transactions, Tier, etc.\n",
        "operationId": "memberGetStatus",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerStatus"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member/{member}/activate": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Activate a member",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating a specific Member account.\n",
        "operationId": "memberPostActivate",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/activate/{token}": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Activate a member with a token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating by activation token a specific Member account.\n",
        "operationId": "memberPostActivateByToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/anonymize": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Anonymize member\u2019s data",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows anonymizing a specific member account.\n",
        "operationId": "memberPostAnonymize",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/channel": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Assign channel to a member",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows assigning a Sales Channel to Member.\n",
        "operationId": "memberPostChannel",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channelId": {
                    "description": "Id of the sales channel to assign to the member",
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/confirm-change/{token}": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Confirm change with a token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows confirming changes with a token.\n",
        "operationId": "memberPostConfirmChange",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/deactivate": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Deactivate a member",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deactivating a specific Member account.\n",
        "operationId": "memberPostDeactivate",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/import": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Import members list",
        "description": "This method allows importing a Member account.\n",
        "operationId": "memberPostImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/ImportFileFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member/register": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Register a member",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows potential Members to register themselves.\nIf CustomerWasRegisteredWithoutActivation webhook is configured,\nthe code, code number, and member contact data will be transmitted.\nThe 'code' field from the webhook should be used\nas token parameter in the endpoint. [member activate](#operation/memberPostActivate)\n",
        "operationId": "memberPostRegister",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customer": {
                    "$ref": "#/components/schemas/CustomerSelfRegistrationFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return registered member ID and email.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customerId": {
                      "description": "Registered member identity",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "email": {
                      "description": "Registered member email",
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
        ]
      }
    },
    "/api/{storeCode}/member/{member}/remove-manually-level": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Remove manually assigned tier",
        "description": "Remove manually assigned tier\n",
        "operationId": "_memberPostRemoveTier",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tierSetId": {
                    "description": "tier set id specifies the tier set in which you want to remove the manually assigned tier",
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/resend-code": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Request activation code",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows resending the activation code.\nUse given code in member activation endpoint as token parameter.\n[member activation](#operation/memberPostActivateByToken)\n",
        "operationId": "memberPostResendCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "phone"
                ],
                "properties": {
                  "phone": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/send-code": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Resend activation code",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows resending the activation code for chosen member\nUse given code in member activation endpoint as token parameter.\n[member activation](#operation/memberPostActivateByToken)\n",
        "operationId": "memberPostSendCode",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/tier": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Assign member to a tier",
        "description": "Assign member to a tier\n",
        "operationId": "_memberPostTier",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "levelId"
                ],
                "properties": {
                  "levelId": {
                    "description": "Id of the tier to assign to the member",
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/password": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update member\u2019s password",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows logged Member changing password.\n",
        "operationId": "memberPutPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/points": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get logged member\u2019s units",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all Points transfers related to the logged Member.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "memberGetTransferList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "value",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "createdBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancelled",
            "in": "query",
            "description": "cancelled",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "description": "pending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "createdAt",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lockedUntil",
            "in": "query",
            "description": "lockedUntil",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expiresAt",
            "in": "query",
            "description": "expiresAt",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "walletType:code",
            "in": "query",
            "description": "Wallet type code related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Transfer"
                          },
                          {
                            "properties": {
                              "walletType": {
                                "$ref": "#/components/schemas/WalletType"
                              }
                            },
                            "type": "object",
                            "property": null
                          }
                        ]
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Transfer points between members",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows transferring Points between logged Member and Member which he chooses.\n",
        "operationId": "memberPostTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transfer": {
                    "$ref": "#/components/schemas/TransferPointsByCustomerFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return points transfer ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/password/reset/request": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Request member\u2019s password reset",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows sending message to the user with password reset url.\nPurpose of this method is to provide \"Forgot password\" functionality.\nInvoking this method will send message to the user with password reset url.\nIf CustomerRequestedPasswordReset webhook is configured\nthe code, code number, and member contact data will be transmitted.\nUse code from the webhook as a token in this endpoint. [password reset](#operation/memberPostPasswordReset)\n",
        "operationId": "memberPostPasswordResetRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/password/reset": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Set a new member\u2019s password",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows setting a new password after requesting a password reset.\n",
        "operationId": "memberPostPasswordReset",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reset": {
                    "$ref": "#/components/schemas/PasswordResetFormType"
                  },
                  "token": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/tier": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get logged member\u2019s tier",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of active Tiers that exist in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "tierMemberGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/reward/bought": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get logged member\u2019s bought rewards",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list all rewards bought by logged Member.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "memberGetBought",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "rewardId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costInPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rewardType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redemptionDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rewards bought by logged in member",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/issuedReward"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points/transfer": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Transfer units between members",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows transferring Points between two specific Members.\n",
        "operationId": "adminPostTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transfer": {
                    "$ref": "#/components/schemas/TransferPointsFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return points transfer ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points/{transfer}": {
      "get": {
        "tags": [
          "Points"
        ],
        "summary": "Get unit transfer\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all details of the specific Points transfer.\n",
        "operationId": "transferGet",
        "parameters": [
          {
            "name": "transfer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Transfer"
                    },
                    {
                      "properties": {
                        "walletType": {
                          "$ref": "#/components/schemas/WalletType"
                        }
                      },
                      "type": "object",
                      "property": null
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/points/history": {
      "get": {
        "tags": [
          "Points"
        ],
        "summary": "Get histogram of number of units",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns histogram of number of Points.\n",
        "operationId": "pointsGetPointsTransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "pointType",
            "in": "query",
            "description": "Filter by point type",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "format": "spent|earned|expired|pending",
              "default": null,
              "pattern": "(spent|earned|expired|pending)",
              "nullable": false
            }
          },
          {
            "name": "lastDays",
            "in": "query",
            "description": "Range from last X days",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": "30"
            }
          },
          {
            "name": "futureDays",
            "in": "query",
            "description": "Range to X days in the future",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Group by interval",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "format": "day|month|year",
              "default": "day",
              "pattern": "(day|month|year)",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return created message ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "float"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points": {
      "get": {
        "tags": [
          "Points"
        ],
        "summary": "Get units transfers list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all Point transfers that have been created in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "pointsGetTransferList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "transferId",
            "in": "query",
            "description": "Transfer id",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Owner account id",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "description": "Owner wallet id",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "Creator ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancelled",
            "in": "query",
            "description": "cancelled",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "description": "pending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "createdAt",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "registeredOn",
            "in": "query",
            "description": "registeredOn",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lockedUntil",
            "in": "query",
            "description": "lockedUntil",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expiresAt",
            "in": "query",
            "description": "expiresAt",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "actionCause:transactionId",
            "in": "query",
            "description": "Transaction id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:campaignId",
            "in": "query",
            "description": "Campaign id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:customEventId",
            "in": "query",
            "description": "Custom event id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:internalEventName",
            "in": "query",
            "description": "Internal event name related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletType:code",
            "in": "query",
            "description": "Wallet type code related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member:id",
            "in": "query",
            "description": "Member indentifier related to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "member:email",
            "in": "query",
            "description": "Member email related to",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "member:phoneNumber",
            "in": "query",
            "description": "Member phone number related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member:loyaltyCardNumber",
            "in": "query",
            "description": "Member loyalty card number related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Transfer2"
                          },
                          {
                            "properties": {
                              "walletType": {
                                "$ref": "#/components/schemas/WalletType"
                              }
                            },
                            "type": "object",
                            "property": null
                          }
                        ]
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points/{transfer}/activate": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Activate units transfer",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating specific Points transfer.\n",
        "operationId": "pointsPostTransferActivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transfer"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/points/add": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Add an units transfer",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding Points transfer to specific Member.\n",
        "operationId": "pointsPostTransferAdd",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transfer": {
                    "$ref": "#/components/schemas/AddPointsFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return points transfer ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points/block": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Block units",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows blocking Points to specific Member.\n",
        "operationId": "pointsPostTransferBlock",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transfer": {
                    "$ref": "#/components/schemas/BlockPointsFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return points transfer ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/points/{transfer}/cancel": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Cancel units transfer",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows canceling a specific Point transfer related to a Member.\n",
        "operationId": "pointsPostTransferCancel",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transfer"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/points/import": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Import units transfer",
        "description": "This method allows importing Points transfer.\n",
        "operationId": "pointsPostTransferImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/ImportFileFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/points/spend": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Spend units",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows spending Points of a specific Member.\n",
        "operationId": "pointsPostTransferSpend",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transfer": {
                    "$ref": "#/components/schemas/SpendPointsFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return points transfer ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/points/{transfer}/expire": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Expire units transfer",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows expiring a specific Point transfer related to a Member.\n",
        "operationId": "pointsPostTransferExpire",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transfer"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/referral": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get referrals list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of referrals Members in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "referralGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "referralId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referrerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referrerName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referrerToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refereeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refereeName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of referrals",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Referral"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/buy": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Buy a reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows buying a specific Reward by Member.<br>\nWith error 'No coupons left' returned when reward cannot be bought because of lack of coupons.\nWith error 'Not enough points' returned when reward cannot be bought because of not enough points on customer account. With empty error returned when reward limits exceeded.\n",
        "operationId": "rewardPostBuy",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/StaticCoupon"
                  },
                  {
                    "$ref": "#/components/schemas/DynamicCoupon"
                  },
                  {
                    "$ref": "#/components/schemas/ConversionCoupon"
                  },
                  {
                    "$ref": "#/components/schemas/MaterialReward"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created reward ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "issuedRewardId": {
                        "description": "Created reward identity",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/brand_icon": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get reward\u2019s brand icon",
        "description": "This method returns a brand icon of the specific Reward.\n",
        "operationId": "brandIconGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Add a brand icon to the reward",
        "description": "This method allows adding a brand icon to the specific Reward.\n",
        "operationId": "brandIconPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "brand_icon": {
                    "$ref": "#/components/schemas/RewardBrandIconFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Reward"
        ],
        "summary": "Delete reward\u2019s brand icon",
        "description": "This method allows removing a brand icon from the specific Reward.\n",
        "operationId": "brandIconDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/reward/{reward}/coupon/{couponCode}": {
      "delete": {
        "tags": [
          "Reward"
        ],
        "summary": "Remove coupon code",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a specific coupon from the specific Reward.\n",
        "operationId": "couonDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          },
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/coupon": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get reward\u2019s coupons list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns coupons related to a specific Reward.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "couponGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issued",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Coupon"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Add coupon list to the reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding coupons to the specific Reward.\n",
        "operationId": "couponPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "coupons": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get redeemed reward\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about a specific Reward.\n",
        "operationId": "rewardGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Reward"
        ],
        "summary": "Update reward configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating data on a specific Reward.\n",
        "operationId": "_rewardPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "reward"
                ],
                "properties": {
                  "reward": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/UpdateMaterialRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateStaticCouponRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateDynamicCouponRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateConversionCouponRewardRequestBody"
                      }
                    ]
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/redemption/export/csv": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Export redeemed rewards",
        "description": "This method returns a CSV file of all bought Rewards.\n",
        "operationId": "rewardGetBoughtExport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "redemptionDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/reward": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get rewards list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all Rewards existing in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.\nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "rewardGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "rewardId",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reward",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "static_coupon",
                "material",
                "dynamic_coupon",
                "conversion_coupon"
              ]
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "public",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "fulfillmentTracking",
            "in": "query",
            "required": false,
            "deprecated": true,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shortDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandName",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "levels",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "segments",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "costInPoints",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "available",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visible",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visibleFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "visibleTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "style": "deepObject",
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all rewards.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RewardResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Add a reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Reward in the system.\n",
        "operationId": "_rewardPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "reward"
                ],
                "properties": {
                  "reward": {
                    "discriminator": {
                      "propertyName": "reward",
                      "mapping": {
                        "material": "#/components/schemas/CreateMaterialRewardRequestBody",
                        "static_coupon": "#/components/schemas/CreateStaticCouponRewardRequestBody",
                        "dynamic_coupon": "#/components/schemas/CreateDynamicCouponRewardRequestBody",
                        "conversion_coupon": "#/components/schemas/CreateConversionCouponRewardRequestBody"
                      }
                    },
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/CreateMaterialRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/CreateStaticCouponRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/CreateDynamicCouponRewardRequestBody"
                      },
                      {
                        "$ref": "#/components/schemas/CreateConversionCouponRewardRequestBody"
                      }
                    ]
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created reward ID.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "rewardId"
                  ],
                  "properties": {
                    "rewardId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/members": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get eligible members list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns for which Member this Reward is visible.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "rewardGetVisibleForMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of elements per page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sorting direction",
            "required": false,
            "schema": {
              "type": "string",
              "format": "asc|desc"
            }
          },
          {
            "name": "visible",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all rewards.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/activate": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Activate a reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating a specific Reward.\n",
        "operationId": "rewardPostActivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/deactivate": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Deactivate a reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deactivating a specific Reward.\n",
        "operationId": "rewardPostDeactivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/redemption/{issuedReward}": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get redeemed reward\u2019s details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a redeemed Reward.\n",
        "operationId": "redemptionGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/issuedReward"
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StaticIssuedReward"
                    },
                    {
                      "$ref": "#/components/schemas/MaterialIssuedReward"
                    },
                    {
                      "$ref": "#/components/schemas/ConversionCouponIssuedReward"
                    },
                    {
                      "$ref": "#/components/schemas/DynamicIssuedReward"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/redemption": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get redeemed rewards list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all redeemed Rewards.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "redemptionGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "rewardId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costInPoints",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rewardType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redemptionDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:loyaltyCardNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:transactionId",
            "in": "query",
            "description": "Transaction id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:campaignId",
            "in": "query",
            "description": "Campaign id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:customEventId",
            "in": "query",
            "description": "Custom event id related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCause:internalEventName",
            "in": "query",
            "description": "Internal event name related to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reward:labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reward:categories",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Issued Reward",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "StaticIssuedReward",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StaticIssuedReward"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse2"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "MaterialIssuedReward",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MaterialIssuedReward"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse2"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "ConversionCouponIssuedReward",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ConversionCouponIssuedReward"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse2"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "DynamicIssuedReward",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DynamicIssuedReward"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse2"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/redemption/{issuedReward}/status/history": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Change redeemed reward\u2019s status change history",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a Reward redemption's status change history.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "redemptionGetStatusHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/issuedReward"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IssuedRewardStatusChange"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/photo/{photoId}": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get reward\u2019s image",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a photo added to a specific Reward.\n",
        "operationId": "photoGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          },
          {
            "name": "photoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Reward"
        ],
        "summary": "Delete reward\u2019s image",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a photo added to a specific Reward.\n",
        "operationId": "photoDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          },
          {
            "name": "photoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/{reward}/photo": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Add an image to the reward",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a photo to a specific Reward.\n",
        "operationId": "photoPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "photo": {
                    "$ref": "#/components/schemas/RewardPhotoFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/rewardCategory/{rewardCategory}": {
      "get": {
        "tags": [
          "Reward category"
        ],
        "summary": "Get reward category details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a specific Reward Category.\n",
        "operationId": "rewardCategoryGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/rewardCategory"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Category name"
                        }
                      },
                      "type": "object",
                      "property": null
                    },
                    {
                      "$ref": "#/components/schemas/RewardCategory"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Reward category"
        ],
        "summary": "Update a reward category",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating data a specific Reward Category.\n",
        "operationId": "rewardCategoryPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/rewardCategory"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reward_category": {
                    "$ref": "#/components/schemas/EditRewardCategoryFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated reward category ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rewardCategoryId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/rewardCategory": {
      "get": {
        "tags": [
          "Reward category"
        ],
        "summary": "Get reward categories list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all Reward Categories.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "rewardCategoryGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "Category name"
                              }
                            },
                            "type": "object",
                            "property": null
                          },
                          {
                            "$ref": "#/components/schemas/RewardCategory"
                          }
                        ]
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Reward category"
        ],
        "summary": "Add a new reward category",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding anew Reward Category.\n",
        "operationId": "rewardCategoryPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reward_category": {
                    "$ref": "#/components/schemas/RewardCategoryFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created reward category ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rewardCategoryId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/rewardCategory/{rewardCategory}/active": {
      "post": {
        "tags": [
          "Reward category"
        ],
        "summary": "Activate a reward category",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating a specific Reward Category.\n",
        "operationId": "rewardCategoryPostChangeState",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/rewardCategory"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "active"
                ],
                "properties": {
                  "active": {
                    "description": "If the category should be active",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "404": {
            "description": "Returned when reward category does not exist"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/token/revoke": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Log user out",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method can be used to log out current user.<br>\nIt will revoke all refresh tokens assigned to current user so it will not be possible\nto obtain new token based on stored refresh token.\n",
        "operationId": "userGetTokenRevoke",
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/password": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Add the member\u2019s password",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows assigning a password to a specific Member.\n",
        "operationId": "memberPostSetPassword",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/segment/{segment}": {
      "get": {
        "tags": [
          "Segment"
        ],
        "summary": "Get segment\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all information about a specific Segment.\n",
        "operationId": "segmentGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Segment"
        ],
        "summary": "Update segment\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating data about a specific Segment.\n",
        "operationId": "segmentPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "segment": {
                    "$ref": "#/components/schemas/EditSegmentFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated segment ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "segmentId": {
                      "description": "Updated segment ID",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Segment"
        ],
        "summary": "Delete a segment",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a specific Segment.\n",
        "operationId": "segmentDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/segment/{segment}/export": {
      "get": {
        "tags": [
          "Segment"
        ],
        "summary": "Export segment\u2019s members list",
        "description": "This method returns a file with all Members assigned to a specific Segment.\n",
        "operationId": "segmentGetCsvSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/segment": {
      "get": {
        "tags": [
          "Segment"
        ],
        "summary": "Get segments lists",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all Segment in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "segmentGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customersCount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "averageTransactionAmount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "averageTransactions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "averageClv",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of segments",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Segment"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Segment"
        ],
        "summary": "Add a new segment",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new Segment to the system.\n",
        "operationId": "segmentPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "segment": {
                    "$ref": "#/components/schemas/CreateSegmentFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created segment ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "segmentId": {
                      "description": "Created segment ID",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/segment/{segment}/members": {
      "get": {
        "tags": [
          "Segment"
        ],
        "summary": "Get segment\u2019s members",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all Members assigned to a Segment.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "segmentGetMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of segmented members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SegmentCustomer"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/segment/{segment}/activate": {
      "post": {
        "tags": [
          "Segment"
        ],
        "summary": "Activate a segment",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating a specific Segment.\n",
        "operationId": "segmentPostActivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/segment/{segment}/deactivate": {
      "post": {
        "tags": [
          "Segment"
        ],
        "summary": "Deactivate a segment",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows deactivating a specific Segment.\n",
        "operationId": "segmentPostDeactivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/segment"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/settings/logo": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get a logo",
        "description": "This method returns the system logo.\n",
        "operationId": "settingsGetPhoto",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful.",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add a logo",
        "description": "This method allows adding the system logo.\n",
        "operationId": "settingsPostPhoto",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "photo": {
                    "$ref": "#/components/schemas/LogoFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete a logo",
        "description": "This method allows removing the system logo.\n",
        "operationId": "settingsDeletePhoto",
        "parameters": [
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/settings/activation": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get activation configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns the current activation configuration. Is it required and what is This method (email or phone).\n",
        "operationId": "settingsGetActivation",
        "parameters": [
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return activation configuration",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "required": {
                      "type": "boolean"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/settings/choices/{type}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get available options for the tenant",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of available options to choose from to save the settings depending on the selected type.\n",
        "operationId": "settingsGetStoreChoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/choicesType"
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "choices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/settings/choices/{type}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get available options",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of available options to choose from to save the settings depending on the selected type.\n",
        "operationId": "settingsGetChoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/choicesType"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "choices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tier/{tier}": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tier\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a specific Tier from the system.\n",
        "operationId": "_tierGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "responses": {
          "200": {
            "description": "Tier details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Tier"
        ],
        "summary": "Update tier\u2019s details",
        "description": "This method allows updating a specific Tier in the system.\n",
        "operationId": "tierPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "level": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LevelFormType"
                      },
                      {
                        "properties": {
                          "translations": {
                            "$ref": "#/components/schemas/Translations"
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated tier ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "levelId": {
                      "description": "Updated tier identity",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Tier"
        ],
        "summary": "Delete a tier",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a specific Tier from the system.\n",
        "operationId": "tierDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tier/{tier}/photo": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tier\u2019s photo",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a photo adding to a specific Tier.\n",
        "operationId": "tierGetPhoto",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful.",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Tier"
        ],
        "summary": "Add a tier\u2019s photo",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a photo to a specific Tier.\n",
        "operationId": "tierPostPhoto",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "photo": {
                    "$ref": "#/components/schemas/LevelPhotoFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Tier"
        ],
        "summary": "Delete tier\u2019s photo",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows removing a photo from a specific Tier.\n",
        "operationId": "tierDeletePhoto",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tier/{tier}/export": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Export tier\u2019s members list",
        "description": "This method returns a file with all Members assigned to a specific Tier.\n",
        "operationId": "tierGetCsvTier",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/tier/create": {
      "post": {
        "tags": [
          "Tier"
        ],
        "summary": "Add a tier",
        "description": "This method allows adding a new Tier to the system.\n",
        "operationId": "tierPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "level": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LevelFormType"
                      },
                      {
                        "properties": {
                          "translations": {
                            "$ref": "#/components/schemas/Translations"
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created tier ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "levelId": {
                      "description": "Created tier identity",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/tier/{tier}/activate": {
      "post": {
        "tags": [
          "Tier"
        ],
        "summary": "Activate a tier",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows activating a specific Tier.\n",
        "operationId": "tierPostActivate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "active"
                ],
                "properties": {
                  "active": {
                    "description": "If the tier should be active",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tierSet": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tier sets list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of all created TierSets in the system.\nCurrently, it returns one available tierSet, but in the future, if the multi-tier sets created, it will return a list of all tierSets from the specific tenant (storeCode).\n",
        "operationId": "_getTierSetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter by active filed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Tier set list.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "total"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TierSetResponseList"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Tier"
        ],
        "summary": "Add a tier set",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new TierSet to the system.\n",
        "operationId": "_tierSetPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTierSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created tier set .",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tierSetId": {
                      "description": "Created tierSet identity",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/transaction/import": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Import transactions",
        "description": "This method allows importing a specific Transaction to the system.\n",
        "operationId": "adminPostIport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/ImportFileFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/transaction/{transaction}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction\u2019s details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns all information about a specific Transaction.\n",
        "operationId": "transactionGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update transaction\u2019s details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows updating data about a specific Transaction.\n",
        "operationId": "transactionPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transaction"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transaction": {
                    "$ref": "#/components/schemas/PostTransaction"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/transaction": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transactions list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all Transaction in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "transactionGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "customerData:customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:loyaltyCardNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:nip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header:documentType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header:documentNumber",
            "in": "query",
            "description": "Specifies the document number used in the transaction.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header:linkedDocumentNumber",
            "in": "query",
            "description": "Used only for return transactions and refers to the original \u2018sell\u2019 document.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header:purchasePlace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header:purchasedAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "grossValue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "matched",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "header:labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items:labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items:category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items:sku",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items:maker",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transaction"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Add a transaction",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows creating a new Transaction.\n",
        "operationId": "_transactionPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return registered transaction id.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transactionId": {
                      "description": "Registered transaction identity",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/transaction/{transaction}/labels": {
      "put": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update transaction\u2019s custom attribute",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows editing of Transaction labels.\n",
        "operationId": "labelPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transaction"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLabelsFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction\u2019s custom attribute",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows removing a Transaction labels.\n",
        "operationId": "lebelDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/transaction"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveLabelsFormType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/transaction/assign/import": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Import assigning to transactions.",
        "description": "This method allows importing assignments to Transaction.\n",
        "operationId": "transactionPostMatchMemberImport",
        "parameters": [
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/ImportFileFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/transaction/assign": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Match the transaction",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows importing assignments to Transaction.\n",
        "operationId": "transactionPostMemberAssign",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "assign": {
                    "$ref": "#/components/schemas/ManuallyAssignCustomerToTransactionFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return transaction ID and assigned member ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "customerId": {
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/admin/login_check": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Get admin token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows to login and get a JWT token for the admin\n",
        "operationId": "adminLoginCheck",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenAndRefreshToken"
          },
          "401": {
            "$ref": "#/components/responses/BadCredentials"
          }
        },
        "security": [
        ]
      }
    },
    "/api/{storeCode}/member/login_check": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Get member token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows to login and get a JWT token for the member\n",
        "operationId": "memberLoginCheck",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "member"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenAndRefreshToken"
          },
          "401": {
            "$ref": "#/components/responses/BadCredentials"
          }
        },
        "security": [
        ]
      }
    },
    "/api/token/refresh": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Refresh admin token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "tokenRefresh",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "0558f8bb29948c4e54c443f..."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenAndRefreshToken"
          },
          "401": {
            "$ref": "#/components/responses/BadCredentials"
          }
        },
        "security": [
        ]
      }
    },
    "/api/{storeCode}/token/refresh": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Refresh member token",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "tokenRefreshMember",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "0558f8bb29948c4e54c443f..."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenAndRefreshToken"
          },
          "401": {
            "$ref": "#/components/responses/BadCredentials"
          }
        },
        "security": [
        ]
      }
    },
    "/api/{storeCode}/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Return settings",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all system settings.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "settingsGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "public",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "settings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Configure settings",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows configuring system settings.\n",
        "operationId": "settingsPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "properties": {
                      "programName": {
                        "type": "string",
                        "deprecated": true
                      },
                      "programUrl": {
                        "type": "string",
                        "deprecated": true
                      },
                      "allowCustomersProfileEdits": {
                        "type": "boolean"
                      },
                      "expirePointsNotificationDays": {
                        "type": "integer"
                      },
                      "expireCouponsNotificationDays": {
                        "type": "integer"
                      },
                      "expireLevelsNotificationDays": {
                        "type": "integer"
                      },
                      "customersIdentificationPriority": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomersIdentificationPriority"
                        }
                      },
                      "tierAssignType": {
                        "type": "string",
                        "enum": [
                          "points",
                          "transactions"
                        ]
                      },
                      "tierWalletCode": {
                        "type": "string"
                      },
                      "excludeDeliveryCostsFromTierAssignment": {
                        "type": "boolean"
                      },
                      "excludedDeliverySKUs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "deprecated": true
                      },
                      "excludedLevelSKUs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "deprecated": true
                      },
                      "excludedLevelCategories": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "levelDowngradeMode": {
                        "type": "string",
                        "enum": [
                          "none",
                          "automatic",
                          "after_x_days"
                        ]
                      },
                      "levelDowngradeDays": {
                        "type": "integer"
                      },
                      "levelDowngradeBase": {
                        "type": "string",
                        "enum": [
                          "none",
                          "active_points",
                          "earned_points",
                          "earned_points_since_last_level_change"
                        ]
                      },
                      "levelResetPointsOnDowngrade": {
                        "type": "boolean"
                      },
                      "accountActivationRequired": {
                        "type": "boolean"
                      },
                      "identificationMethod": {
                        "type": "string",
                        "enum": [
                          "email",
                          "phone",
                          "loyaltyCardNumber"
                        ]
                      },
                      "timezone": {
                        "type": "string",
                        "example": "Europe/Warsaw"
                      },
                      "rewardWalletCode": {
                        "type": "string"
                      },
                      "activeMember": {
                        "properties": {
                          "transactionInXDays": {
                            "description": "Required if the customEventsInXDays field is not filled.",
                            "type": "integer"
                          },
                          "customEventsInXDays": {
                            "description": "Required if the transactionInXDays field is not filled.",
                            "required": [
                              "days",
                              "allEvents"
                            ],
                            "properties": {
                              "days": {
                                "type": "integer"
                              },
                              "allEvents": {
                                "type": "boolean"
                              },
                              "eventTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "operator": {
                            "description": "Required if the customEventsInXDays and transactionInXDays fields are filled.",
                            "type": "string",
                            "enum": [
                              "and",
                              "or"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Granted settings",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "settings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "summary": "Update settings",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows configuring system settings partially.\n",
        "operationId": "settingsPatch",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "properties": {
                      "programName": {
                        "type": "string",
                        "deprecated": true
                      },
                      "programUrl": {
                        "type": "string",
                        "deprecated": true
                      },
                      "allowCustomersProfileEdits": {
                        "type": "boolean"
                      },
                      "expirePointsNotificationDays": {
                        "type": "integer"
                      },
                      "expireCouponsNotificationDays": {
                        "type": "integer"
                      },
                      "expireLevelsNotificationDays": {
                        "type": "integer"
                      },
                      "customersIdentificationPriority": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomersIdentificationPriority2"
                        }
                      },
                      "tierAssignType": {
                        "type": "string",
                        "enum": [
                          "points",
                          "transactions"
                        ]
                      },
                      "tierWalletCode": {
                        "type": "string"
                      },
                      "excludeDeliveryCostsFromTierAssignment": {
                        "type": "boolean"
                      },
                      "excludedDeliverySKUs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "deprecated": true
                      },
                      "excludedLevelSKUs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "deprecated": true
                      },
                      "excludedLevelCategories": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "levelDowngradeMode": {
                        "type": "string",
                        "enum": [
                          "none",
                          "automatic",
                          "after_x_days"
                        ]
                      },
                      "levelDowngradeDays": {
                        "type": "integer"
                      },
                      "levelDowngradeBase": {
                        "type": "string",
                        "enum": [
                          "none",
                          "active_points",
                          "earned_points",
                          "earned_points_since_last_level_change"
                        ]
                      },
                      "levelResetPointsOnDowngrade": {
                        "type": "boolean"
                      },
                      "accountActivationRequired": {
                        "type": "boolean"
                      },
                      "identificationMethod": {
                        "type": "string",
                        "enum": [
                          "email",
                          "phone",
                          "loyaltyCardNumber"
                        ]
                      },
                      "timezone": {
                        "type": "string",
                        "example": "Europe/Warsaw"
                      },
                      "rewardWalletCode": {
                        "type": "string"
                      },
                      "activeMember": {
                        "properties": {
                          "transactionInXDays": {
                            "description": "Required if the customEventsInXDays field is not filled.",
                            "type": "integer"
                          },
                          "customEventsInXDays": {
                            "description": "Required if the transactionInXDays field is not filled.",
                            "required": [
                              "days",
                              "allEvents"
                            ],
                            "properties": {
                              "days": {
                                "type": "integer"
                              },
                              "allEvents": {
                                "type": "boolean"
                              },
                              "eventTypes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "operator": {
                            "description": "Required if the customEventsInXDays and transactionInXDays fields are filled.",
                            "type": "string",
                            "enum": [
                              "and",
                              "or"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/achievement": {
      "get": {
        "tags": [
          "Achievement"
        ],
        "summary": "Get achievements list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "achievementGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of achievements",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AchievementBasicData"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Achievement"
        ],
        "summary": "Add an achievement",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new achievement to the system.\n",
        "operationId": "achievementPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "achievement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateAchievementFormType"
                      },
                      {
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "properties": {
                                    "completeRule": {
                                      "allOf": [
                                        {
                                          "properties": {
                                            "period": {
                                              "allOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "$ref": "#/components/schemas/PeriodTypeFormType"
                                                    },
                                                    "consecutive": {
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "property": null
                                                }
                                              ]
                                            }
                                          },
                                          "type": "object",
                                          "property": null
                                        }
                                      ]
                                    },
                                    "aggregation": {
                                      "allOf": [
                                        {
                                          "properties": {
                                            "rule": {
                                              "type": "string"
                                            },
                                            "type": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object",
                                          "property": null
                                        }
                                      ]
                                    },
                                    "conditions": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/components/schemas/ConditionType"
                                      }
                                    },
                                    "translations": {
                                      "properties": {
                                        "en": {
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "event": {
                                      "type": "string"
                                    },
                                    "uniqueReferee": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object",
                                  "property": null
                                }
                              ]
                            }
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created achievement ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "achievementId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/achievement": {
      "get": {
        "tags": [
          "Achievement"
        ],
        "summary": "Get member\u2019s achievements status",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "achievementProgressMember",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "achievementId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "completionCount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active achievements progress for member",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberAchievement"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/webhook/subscription": {
      "get": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Get webhook subscriptions list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "webhookSubscriptionGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legacy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eventName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhook subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WebhookSubscription"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Subscribe to a webhook",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new webhook subscription to the system.\n",
        "operationId": "webhookSubscriptionPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "webhookSubscription": {
                    "$ref": "#/components/schemas/CreateWebhookSubscriptionFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created webhook subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "webhookSubscriptionId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/wallet": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get member\u2019s wallets details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "memberWalletGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "walletTypeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of wallets",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Wallet"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/groupOfValues": {
      "get": {
        "tags": [
          "Group Of Values"
        ],
        "summary": "Get collections list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "groupOfValuesGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groupOfValues",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupOfValuesResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Group Of Values"
        ],
        "summary": "Add a new collection",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.\nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "groupOfValuesPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "groupOfValues": {
                    "$ref": "#/components/schemas/GroupOfValuesFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupOfValuesId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/analytics/campaign/single-view/{campaignId}": {
      "get": {
        "tags": [
          "Data Analytics"
        ],
        "summary": "Retrieve campaign overview",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "dataAnalyticsGetCampaignSingleView",
        "parameters": [
          {
            "name": "dataType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "totalEngagement",
                "engagedMembers"
              ]
            }
          },
          {
            "name": "aggregationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "intervalStartDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "intervalEndDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for general overview dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SingleView"
                    },
                    {
                      "properties": {
                        "aggregationType": {
                          "type": "string",
                          "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                          ]
                        },
                        "dataType": {
                          "type": "string",
                          "enum": [
                            "totalEngagement",
                            "engagedMembers"
                          ]
                        }
                      },
                      "type": "object",
                      "property": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/export/{export}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get export details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "exportGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/export"
          }
        ],
        "responses": {
          "200": {
            "description": "Export details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/export/{export}/download": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Download an export",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "exportGetDownload",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/export"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV File",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/export": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get exports lists",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "exportGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "exportId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "campaignCode",
                "member",
                "memberTier",
                "memberSegment",
                "rewardFulfillment"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "done",
                "failed",
                "error"
              ]
            }
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of exports",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExportBasicData"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/export/{type}": {
      "post": {
        "tags": [
          "Export"
        ],
        "summary": "Create an export",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "postExport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Export type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "campaignCode",
                "member",
                "memberTier",
                "memberSegment",
                "rewardFulfillment"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ExportCampaignCodeTypeRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ExportMemberTypeRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ExportMemberTierTypeRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ExportMemberSegmentTypeRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ExportRewardFulfillmentTypeRequestBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/groupOfValues/{groupOfValues}": {
      "get": {
        "tags": [
          "Group Of Values"
        ],
        "summary": "Get collection details",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\n",
        "operationId": "groupOfValuesGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/groupOfValues"
          }
        ],
        "responses": {
          "200": {
            "description": "Group of values details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupOfValuesResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Group Of Values"
        ],
        "summary": "Update a collection",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\n",
        "operationId": "groupOfValuesPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/groupOfValues"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "groupOfValues": {
                    "$ref": "#/components/schemas/UpdateGroupOfValuesFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/groupOfValues/{groupOfValues}/values": {
      "get": {
        "tags": [
          "Group Of Values"
        ],
        "summary": "Get collection values list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\n",
        "operationId": "valuesGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "groupOfValues",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values list",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Value"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/tierSet/{tierSet}": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Return tier set member progress.",
        "description": "This method returns detailed member progress information for a specific tier set",
        "operationId": "_tierSetMemberProgress",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/tierSet"
          }
        ],
        "responses": {
          "200": {
            "description": "Tier set member progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierSetMemberProgress"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/webhook/subscription/{webhookSubscription}": {
      "get": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Get a webhook subscription details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "webhookSubscriptionGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/webhookSubscription"
          },
          {
            "name": "webhookSubscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionDetails"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Update subscription to a webhook",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "webhookSubscriptionPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/webhookSubscription"
          },
          {
            "name": "webhookSubscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "webhookSubscription": {
                    "$ref": "#/components/schemas/UpdateWebhookSubscriptionFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Delete subscription to a webhook",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "webhookSubscriptionDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/webhookSubscription"
          },
          {
            "name": "webhookSubscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/webhook/event": {
      "get": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Get webhook event types",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "webhookEventGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhook events",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/achievement/{achievement}": {
      "get": {
        "tags": [
          "Achievement"
        ],
        "summary": "Get achievement\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "achievementGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/achievement"
          }
        ],
        "responses": {
          "200": {
            "description": "Achievement details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Achievement"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Achievement"
        ],
        "summary": "Update achievement\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "achievementPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/achievement"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "achievement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateAchievementFormType"
                      },
                      {
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "properties": {
                                    "completeRule": {
                                      "allOf": [
                                        {
                                          "properties": {
                                            "period": {
                                              "allOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "$ref": "#/components/schemas/PeriodTypeFormType"
                                                    },
                                                    "consecutive": {
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "property": null
                                                }
                                              ]
                                            }
                                          },
                                          "type": "object",
                                          "property": null
                                        }
                                      ]
                                    },
                                    "aggregation": {
                                      "allOf": [
                                        {
                                          "properties": {
                                            "rule": {
                                              "type": "string"
                                            },
                                            "type": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object",
                                          "property": null
                                        }
                                      ]
                                    },
                                    "conditions": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/components/schemas/ConditionType"
                                      }
                                    },
                                    "translations": {
                                      "properties": {
                                        "en": {
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "event": {
                                      "type": "string"
                                    },
                                    "uniqueReferee": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object",
                                  "property": null
                                }
                              ]
                            }
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Achievement"
        ],
        "summary": "Update achievement\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>",
        "operationId": "achievementPatch",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/achievement"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "achievement": {
                    "$ref": "#/components/schemas/PatchAchievementFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/billable-report": {
      "get": {
        "tags": [
          "BillableReport"
        ],
        "summary": "Get billable reports list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a list of billable members and transactions per last 12 months and sum of those period.<br>\nIf `tenantId` is provided, it will return the billable report for that tenant otherwise it will return the billable report for all tenants.\n",
        "operationId": "_billableReportGetList",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Store ID",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Billable report.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillableReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/campaign": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get campaigns list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about all Campaigns created in the system.\\n\\n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \\n\nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "campaignGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "direct",
                "referral"
              ]
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "transaction",
                "return_transaction",
                "custom_event",
                "internal_event",
                "time",
                "achievement",
                "custom_event_unique_code"
              ]
            }
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "description": "Campaign ID",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Campaign name",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "equal": {
                "summary": "Equal value",
                "value": {
                  "eq": "value"
                }
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Active",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "available",
            "in": "query",
            "description": "Available",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "startsAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endsAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Filter with Campaign custom attributes.\n\nExample: `labels=(key;value)`\n",
            "required": false,
            "style": "deepObject",
            "explode": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "style": "deepObject",
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Campaign",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignResponse"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "MultiReferralCampaign",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MultiReferralCampaignResponse"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "UniqueCodeCampaign",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UniqueCodeCampaignResponse"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "TimeTriggerCampaign",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TimeTriggerCampaignResponse"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Add a new campaign",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows creating a new Campaign.\n",
        "operationId": "_campaignPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AchievementCampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/UniqueCodeCampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CampaignRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/MultiReferralCampaignRequestBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created campaign ID.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "campaignId"
                  ],
                  "properties": {
                    "campaignId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/campaign": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get a list of available campaigns for the member.",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns all active Campaigns for Member.\nThe logged in member can only see their own available campaigns.\nEndpoint returns all active campaigns, for campaigns that have not reached the limit it adds `\"limitReached\": false`,\nand for campaigns that have reached the limit `\"limitReached\": true`.\nIf there is a dynamic effect in the campaign, the endpoint may return that the\ncampaign limit is not reached, although the effect may exceed the limit and points will not be awarded \nIf sorting is not chosen, the rows will be returned in an unspecified order.\nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_campaignAvailableMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "This parameter allows to show all campaign even not active",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Campaign name",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "equal": {
                "summary": "Equal value",
                "value": {
                  "eq": "value"
                }
              }
            }
          },
          {
            "name": "startsAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endsAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Filter with Campaign custom attributes.\n\nExample: `labels=(key;value)`\n",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available member campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "AvailableCampaign",
                      "required": [
                        "items",
                        "total"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AvailableCampaign"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "title": "MemberAvailableCampaign",
                      "required": [
                        "items",
                        "total"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MemberAvailableCampaign"
                          }
                        },
                        "total": {
                          "$ref": "#/components/schemas/SearchableTotalResponse"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/campaign/{campaign}/codes": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get redemption codes list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "campaignCodesGetList",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usedAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Codes",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CampaignCode"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/campaign/{campaign}/codes/generate": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Generate redemption codes",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "campaignCodesPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostGenerateCodes"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/campaign/simulate": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Simulate campaigns result",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns detailed information about all Campaigns created in the system.\n",
        "operationId": "campaignPostSimulate",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "CampaignTransaction",
                    "properties": {
                      "simulate": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SimulateFormType"
                          },
                          {
                            "properties": {
                              "transaction": {
                                "$ref": "#/components/schemas/SimulatedTransaction"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "CampaignCustomEvent",
                    "properties": {
                      "simulate": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SimulateFormType"
                          },
                          {
                            "properties": {
                              "custom_event": {
                                "$ref": "#/components/schemas/SimulatedCustomEvent"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "CampaignInternalEvent",
                    "properties": {
                      "simulate": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SimulateFormType"
                          },
                          {
                            "properties": {
                              "internal_event": {
                                "$ref": "#/components/schemas/SimulatedInternalEvent"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/customEvent": {
      "get": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Get custom events list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a complete list of the Custom Events that exist in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "customEventGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerData:loyaltyCardNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomEvent"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Add a custom event",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method allows creating a new Custom Event in the system.\n",
        "operationId": "customEventPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEventRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customEventId": {
                      "description": "Custom Event Id",
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/customEvent/{customEvent}": {
      "get": {
        "tags": [
          "Custom Event"
        ],
        "summary": "Get custom event\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns detailed information about specific Custom Event in the system.\n",
        "operationId": "customEventGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/customEvent"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/import": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Get imports list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns all imports.  \n\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_importGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "importId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "groupValue",
                "segmentMembers",
                "unitTransferAdding",
                "unitTransferSpending",
                "transaction"
              ]
            }
          },
          {
            "name": "uploadedDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of imports",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Import"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/import/{import}": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Get import details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_importItemGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "groupValue",
                "segmentMembers",
                "unitTransferAdding",
                "unitTransferSpending",
                "transaction"
              ]
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "import",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of imports",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ImportItem"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/import/{type}": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Import file",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "postImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "groupValue",
                "segmentMembers",
                "unitTransferAdding",
                "unitTransferSpending",
                "transaction"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Import Members",
                    "properties": {
                      "import": {
                        "required": [
                          "file"
                        ],
                        "properties": {
                          "file": {
                            "description": "See <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "Import Group values",
                    "properties": {
                      "import": {
                        "required": [
                          "additionalData",
                          "file"
                        ],
                        "properties": {
                          "additionalData": {
                            "required": [
                              "groupOfValuesId"
                            ],
                            "properties": {
                              "groupOfValuesId": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "file": {
                            "description": "See <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "Import Segment Members",
                    "properties": {
                      "import": {
                        "required": [
                          "additionalData",
                          "file"
                        ],
                        "properties": {
                          "additionalData": {
                            "required": [
                              "segmentId",
                              "identificationMethod"
                            ],
                            "properties": {
                              "segmentId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "identificationMethod": {
                                "description": "The identification method allows you to map an identifier to the appropriate member.\nTherefore, you should choose an identification method that corresponds to the type of member identifiers included in the file.\nSee <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                                "type": "string",
                                "enum": [
                                  "uuid",
                                  "email",
                                  "phone",
                                  "loyaltyCardNumber"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "file": {
                            "description": "A file with a list of member identifiers.\nAll identifiers in the imported file must be of the same type.\nAvailable identifier types are: uuid, email, phone, loyaltyCardNumber.\nSee <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "string",
                            "format": "binary"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "Import adding units transfers",
                    "properties": {
                      "import": {
                        "required": [
                          "file"
                        ],
                        "properties": {
                          "file": {
                            "description": "See <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "string",
                            "format": "binary"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "Import spending units transfers",
                    "properties": {
                      "import": {
                        "required": [
                          "file"
                        ],
                        "properties": {
                          "file": {
                            "description": "See <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "string",
                            "format": "binary"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "title": "Import transactions",
                    "properties": {
                      "import": {
                        "required": [
                          "file"
                        ],
                        "properties": {
                          "file": {
                            "description": "See <a href=\"https://help.openloyalty.io/main-features/imports-exports/imports/sample-import-files\" target=\"_blank\">sample import files available in the import guide</a>\n",
                            "type": "string",
                            "format": "binary"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "importId"
                  ],
                  "properties": {
                    "importId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/campaign/visible": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get a list of visible campaigns for the member",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\n",
        "operationId": "campaignVisibleMember",
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|email=[a-zA-Z0-9!#$%&'\\.*+\\-@=?^_`{|}~;]+|phone=[0-9+]+|loyaltyCardNumber=[0-9a-zA-Z\\._-]+"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startsAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endsAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available member campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VisibleCampaign"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse2"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/achievement/{achievement}/progress": {
      "patch": {
        "tags": [
          "Achievement"
        ],
        "summary": "Update achievement\u2019s progress for member",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "achievementProgressMemberPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/achievement"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "memberProgress": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateMemberAchievementProgressFormType"
                      },
                      {
                        "properties": {
                          "rules": {
                            "required": [
                              "achievementRuleId",
                              "currentPeriodValue"
                            ],
                            "type": "array",
                            "items": {
                              "properties": {
                                "achievementRuleId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "currentPeriodValue": {
                                  "type": "number",
                                  "format": "float"
                                },
                                "completedConsecutivePeriods": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "type": "object",
                        "property": null
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/{member}/history": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Check member\u2019s activity history",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns detailed information about a specific Campaign.\n",
        "operationId": "_memberGetHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "name": "type",
            "in": "query",
            "description": "This parameter can be a simple string or a complex object. Examples:  - `type=TEST` - `type[in]=TEST&type[another]=VALUE`\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Member history.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "AssignedTransactionToCustomer": "#/components/schemas/AssignedTransactionToCustomer",
                            "CustomerWasActivated": "#/components/schemas/CustomerWasActivated",
                            "CustomerWasAnonymized": "#/components/schemas/CustomerWasAnonymized",
                            "CustomerWasDeactivated": "#/components/schemas/CustomerWasDeactivated",
                            "CustomerWasMovedToLevel": "#/components/schemas/CustomerWasMovedToLevel",
                            "CustomerWasRegistered": "#/components/schemas/CustomerWasRegistered",
                            "PendingPointsWereAdded": "#/components/schemas/PendingPointsWereAdded",
                            "PendingPointsWereCanceled": "#/components/schemas/PendingPointsWereCanceled",
                            "PointsWereAdded": "#/components/schemas/PointsWereAdded",
                            "PointsWereBlocked": "#/components/schemas/PointsWereBlocked",
                            "PointsWereCanceled": "#/components/schemas/PointsWereCanceled",
                            "PointsWereExpired": "#/components/schemas/PointsWereExpired",
                            "PointsWereSpent": "#/components/schemas/PointsWereSpent",
                            "PointsWereTransferred": "#/components/schemas/PointsWereTransferred",
                            "PointsWereUnblocked": "#/components/schemas/PointsWereUnblocked",
                            "PointsWereUnlocked": "#/components/schemas/PointsWereUnlocked",
                            "RewardWasBought": "#/components/schemas/RewardWasBought",
                            "AchievementCompleted": "#/components/schemas/AchievementCompleted",
                            "MemberAchievementCompletionCountWasDecreased": "#/components/schemas/MemberAchievementCompletionCountWasDecreased",
                            "MemberAchievementProgressWasChanged": "#/components/schemas/MemberAchievementProgressWasChanged"
                          }
                        },
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/AssignedTransactionToCustomer"
                          },
                          {
                            "$ref": "#/components/schemas/CustomerWasActivated"
                          },
                          {
                            "$ref": "#/components/schemas/CustomerWasAnonymized"
                          },
                          {
                            "$ref": "#/components/schemas/CustomerWasDeactivated"
                          },
                          {
                            "$ref": "#/components/schemas/CustomerWasMovedToLevel"
                          },
                          {
                            "$ref": "#/components/schemas/CustomerWasRegistered"
                          },
                          {
                            "$ref": "#/components/schemas/PendingPointsWereAdded"
                          },
                          {
                            "$ref": "#/components/schemas/PendingPointsWereCanceled"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereAdded"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereBlocked"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereCanceled"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereExpired"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereSpent"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereTransferred"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereUnblocked"
                          },
                          {
                            "$ref": "#/components/schemas/PointsWereUnlocked"
                          },
                          {
                            "$ref": "#/components/schemas/RewardWasBought"
                          },
                          {
                            "$ref": "#/components/schemas/AchievementCompleted"
                          },
                          {
                            "$ref": "#/components/schemas/MemberAchievementCompletionCountWasDecreased"
                          },
                          {
                            "$ref": "#/components/schemas/MemberAchievementProgressWasChanged"
                          }
                        ]
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/redemption/{issuedReward}/status": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Change redeemed reward\u2019s status",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows changing a Reward redemption status.\n",
        "operationId": "redemptionPostStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/issuedReward"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionStatusRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/reward/public": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get public rewards list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all public Rewards in the system. \nIf sorting is not chosen, the rows will be returned in an unspecified order. \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "rewardGetPublic",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/reward"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all rewards.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RewardResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member/{member}/reward": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get available rewards to a member list",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all Rewards existing in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.\nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_rewardGetMemberReward",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "rewardId",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reward",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "static_coupon",
                "material",
                "dynamic_coupon",
                "conversion_coupon"
              ]
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "public",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "fulfillmentTracking",
            "in": "query",
            "required": false,
            "deprecated": true,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "shortDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandName",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "levels",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "segments",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "costInPoints",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "available",
            "in": "query",
            "description": "Filters out active rewards by active field and also by activity dates from and to.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visible",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visibleFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "visibleTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "style": "deepObject",
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all rewards available for logged in member.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "total"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberRewardResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/member/reward": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get all rewards available for logged in member.",
        "description": "<label style=\"background-color: #BFE1F6;padding:5px;\">Integration</label><br><br>\nThis method returns a list of all rewards available for logged Member. \nIf sorting is not chosen, the rows will be returned in an unspecified order. \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_memberRewardGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "rewardId",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reward",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "static_coupon",
                "material",
                "dynamic_coupon",
                "conversion_coupon"
              ]
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "public",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "fulfillmentTracking",
            "in": "query",
            "required": false,
            "deprecated": true,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "shortDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandName",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "brandDescription",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "levels",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "segments",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Labels using pattern e.g. (key1;value1),(key2;value2),...",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": true
          },
          {
            "name": "costInPoints",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": true
          },
          {
            "name": "available",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visible",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visibleFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "visibleTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeFrom",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "activeTo",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "If set to html, the descriptions will be in HTML format. Omit for raw output.",
            "required": false,
            "style": "deepObject",
            "schema": {
              "type": "string",
              "format": "html|raw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all rewards available for logged in member.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberRewardResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/store/{store}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get tenant\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a specific Store (tenant).\n",
        "operationId": "_storeGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/store"
          }
        ],
        "responses": {
          "200": {
            "description": "Store details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update tenant\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows updating a specific Store (tenant) in the system.\n",
        "operationId": "storePut",
        "parameters": [
          {
            "$ref": "#/components/parameters/store"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "store": {
                    "$ref": "#/components/schemas/StoreFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/store": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get tenants list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method returns a specific Store (tenant).\n",
        "operationId": "storeGetList",
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "description": "Store ID",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Store name",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "equal": {
                "summary": "Equal value",
                "value": {
                  "eq": "value"
                }
              }
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Active",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "equal": {
                "summary": "Equal value",
                "value": {
                  "eq": true
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of stores.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListOfItems"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreResponse"
                          }
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Add a new tenant",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new Store to the system.\n",
        "operationId": "storePost",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "store": {
                    "$ref": "#/components/schemas/StoreFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created store ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "storeId": {
                      "description": "Created store identity",
                      "type": "string",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/tier": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tiers list",
        "description": "This method returns a list of all created Tiers in the system.  \nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_tierGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conditionValue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter by active filed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reward:name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reward:code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reward:value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tiers",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "total"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TierResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    },
    "/api/{storeCode}/member/{member}/tierSet": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get list of tier sets which member is assigned",
        "operationId": "_memberTierSetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "name": "currentTierId",
            "in": "query",
            "description": "Filter by current tier id field",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tierSetId",
            "in": "query",
            "description": "Filter by tier set Id field",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of member tier sets.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "total"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberTierSet"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tierSet/{tierSet}": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tier set\u2019s details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_tierSetGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tierSet"
          }
        ],
        "responses": {
          "200": {
            "description": "Tier set details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierSetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Tier"
        ],
        "summary": "Update a tier set",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_tierSetPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tierSet"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTierSet"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/tierSet/{tierSet}/tiers": {
      "get": {
        "tags": [
          "Tier"
        ],
        "summary": "Get tiers list from a tier set",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_getTierSetTiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tierSet"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Tiers list",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "total"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TierSetTiersResponse"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/SearchableTotalResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "put": {
        "tags": [
          "Tier"
        ],
        "summary": "Update existing tier list with conditions",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nMethod allows to edit existing tier list with conditions.\n",
        "operationId": "_tierPutList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/tierSet"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tiers"
                ],
                "properties": {
                  "tiers": {
                    "$ref": "#/components/schemas/TiersListPut"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/wallet/{wallet}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Check wallet details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "walletGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/wallet"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/walletType": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallets list",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nIf sorting is not chosen, the rows will be returned in an unspecified order.  \nTo sort a result, use an `_orderBy` parameter in query.\n",
        "operationId": "_walletTypeGetList",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDefault",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/itemsOnPage"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of walletTypes",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListOfItems"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WalletType"
                          }
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      },
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Add a wallet",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\nThis method allows adding a new wallet to the system.\n",
        "operationId": "_walletTypePost",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWalletTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return created walletType ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "walletTypeId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          }
        }
      }
    },
    "/api/{storeCode}/walletType/{walletType}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Check wallet type details",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_walletTypeGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/walletType"
          }
        ],
        "responses": {
          "200": {
            "description": "WalletType details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTypeDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Update wallet\u2019s configuration",
        "description": "<label style=\"background-color: #D4EDBC;padding:5px;\">Management</label><br><br>\n",
        "operationId": "_walletTypePut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/walletType"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutWalletTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/{storeCode}/webhook/subscription/{webhookSubscription}/legacy": {
      "put": {
        "tags": [
          "Webhook subscription"
        ],
        "summary": "Update a webhook subscription legacy mode",
        "operationId": "webhookSubscriptionLegacyPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeCode"
          },
          {
            "$ref": "#/components/parameters/webhookSubscription"
          },
          {
            "name": "webhookSubscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "webhookSubscription": {
                    "$ref": "#/components/schemas/UpdateWebhookSubscriptionLegacyModeFormType"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExpiredToken"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidToken"
                    },
                    {
                      "$ref": "#/components/schemas/Unauthorized"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AccessDenied"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "deprecated": true
      }
    }
  },
  "components": {
    "schemas": {
      "RewardFormType2": {
        "required": [
          "translations",
          "reward",
          "categories",
          "levels",
          "segments",
          "activity",
          "visibility",
          "labels"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "reward": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tax": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "taxPriceValue": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "activity": {
            "$ref": "#/components/schemas/RewardActivityFormType"
          },
          "visibility": {
            "$ref": "#/components/schemas/RewardVisibilityFormType"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLabelFormType"
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "type": "number"
          },
          "sourceWalletTypeCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentResponse": {
        "properties": {
          "segmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "customersCount": {
            "type": "integer"
          },
          "averageTransactionAmount": {
            "type": "number",
            "format": "float"
          },
          "averageTransactions": {
            "type": "number",
            "format": "float"
          },
          "averageClv": {
            "type": "number",
            "format": "float"
          },
          "currency": {
            "type": "string"
          },
          "calculatedAt": {
            "description": "The field is added to the segment when the segment is recalculated.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "UserLabelFormType": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionLabelFormType": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentLabelFormType": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CampaignLabelFormType": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillableReportResponse": {
        "description": "Billable report response",
        "required": [
          "billableMembers",
          "billableTransactions",
          "billableMembersPerMonth",
          "billableTransactionsPerMonth"
        ],
        "properties": {
          "billableMembers": {
            "description": "Number of billable members from the last 12 months.",
            "type": "number",
            "format": "integer",
            "example": 10000
          },
          "billableTransactions": {
            "description": "Number of billable transactions from the last 12 months.",
            "type": "number",
            "format": "integer",
            "example": 9000
          },
          "billableMembersPerMonth": {
            "description": "Number of billable members per month from the last 12 months.",
            "type": "object",
            "example": {
              "2023-08-01": 1000,
              "2023-07-01": 1000,
              "2023-06-01": 1000,
              "2023-05-01": 1000,
              "2023-04-01": 1000,
              "2023-03-01": 1000,
              "2023-02-01": 1000,
              "2023-01-01": 1000,
              "2022-12-01": 1000,
              "2022-11-01": 1000,
              "2022-10-01": 0,
              "2022-09-01": 0
            }
          },
          "billableTransactionsPerMonth": {
            "description": "Number of billable transactions per month from the last 12 months.",
            "type": "object",
            "example": {
              "2023-08-01": 1000,
              "2023-07-01": 1000,
              "2023-06-01": 1000,
              "2023-05-01": 1000,
              "2023-04-01": 1000,
              "2023-03-01": 1000,
              "2023-02-01": 1000,
              "2023-01-01": 1000,
              "2022-12-01": 1000,
              "2022-11-01": 0,
              "2022-10-01": 0,
              "2022-09-01": 0
            }
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CampaignResponse": {
        "description": "Campaign",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "direct",
              "referral"
            ]
          },
          "trigger": {
            "type": "string",
            "enum": [
              "transaction",
              "return_transaction",
              "custom_event",
              "internal_event",
              "time",
              "achievement",
              "custom_event_unique_code"
            ]
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limit"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslationsResponse"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          }
        },
        "type": "object"
      },
      "UniqueCodeCampaignResponse": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "referral"
          },
          "trigger": {
            "type": "string",
            "example": "custom_event_unique_code"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limit"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslationsResponse"
          },
          "eventCodeAttribute": {
            "type": "string",
            "example": "qrCode"
          },
          "codeGenerator": {
            "properties": {
              "characterSet": {
                "type": "string",
                "example": "alphanum"
              },
              "length": {
                "type": "integer",
                "example": 12
              },
              "prefix": {
                "type": "string",
                "example": "Code"
              }
            },
            "type": "object"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          }
        },
        "type": "object"
      },
      "MultiReferralCampaignResponse": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "referral"
          },
          "trigger": {
            "type": "string"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "multiLevel": {
            "type": "number",
            "example": 2
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limit"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslationsResponse"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          }
        },
        "type": "object"
      },
      "TimeTriggerCampaignResponse": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "direct"
          },
          "trigger": {
            "type": "string",
            "example": "time"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "multiLevel": {
            "type": "number",
            "example": 2
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limit"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslationsResponse"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "audience": {
            "$ref": "#/components/schemas/Audience"
          },
          "triggerStrategy": {
            "$ref": "#/components/schemas/TriggerStrategy"
          }
        },
        "type": "object"
      },
      "PatchDisplayOrder": {
        "properties": {
          "campaign": {
            "required": [
              "displayOrder"
            ],
            "properties": {
              "displayOrder": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PostGenerateCodes": {
        "properties": {
          "generate": {
            "required": [
              "numberOfCodes"
            ],
            "properties": {
              "numberOfCodes": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CampaignRequestBody": {
        "title": "Campaign",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "type",
              "trigger",
              "translations",
              "activity",
              "rules"
            ],
            "properties": {
              "triggerStrategy": {
                "$ref": "#/components/schemas/TriggerStrategy"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "type": {
                "type": "string",
                "enum": [
                  "direct",
                  "referral"
                ]
              },
              "trigger": {
                "type": "string",
                "enum": [
                  "transaction",
                  "return_transaction",
                  "custom_event",
                  "internal_event",
                  "time",
                  "achievement",
                  "custom_event_unique_code"
                ]
              },
              "event": {
                "description": "Allowed only for campaign with trigger event",
                "type": "string"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "memberFilter": {
                "description": "Only allowed for time trigger",
                "properties": {
                  "strategy": {
                  }
                },
                "type": "object"
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "EventRequestBody": {
        "title": "EventCampaign",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "type",
              "trigger",
              "translations",
              "activity",
              "rules",
              "event"
            ],
            "properties": {
              "triggerStrategy": {
                "$ref": "#/components/schemas/TriggerStrategy"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "type": {
                "type": "string",
                "enum": [
                  "direct",
                  "referral"
                ]
              },
              "trigger": {
                "type": "string",
                "enum": [
                  "transaction",
                  "return_transaction",
                  "custom_event",
                  "internal_event",
                  "time",
                  "achievement",
                  "custom_event_unique_code"
                ],
                "example": "custom_event"
              },
              "event": {
                "description": "Allowed only for campaign with trigger event",
                "type": "string"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MultiReferralCampaignRequestBody": {
        "title": "MultiReferralCampaign",
        "description": "When campaign is referral type, you can specify multi level",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "multiLevel",
              "type",
              "trigger",
              "translations",
              "activity",
              "rules"
            ],
            "properties": {
              "triggerStrategy": {
                "$ref": "#/components/schemas/TriggerStrategy"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "type": {
                "type": "string",
                "enum": [
                  "direct",
                  "referral"
                ]
              },
              "multiLevel": {
                "type": "number",
                "example": 2
              },
              "trigger": {
                "type": "string",
                "enum": [
                  "transaction",
                  "return_transaction",
                  "custom_event",
                  "internal_event",
                  "time",
                  "achievement",
                  "custom_event_unique_code"
                ]
              },
              "event": {
                "type": "string"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "memberFilter": {
                "description": "Only allowed for time trigger",
                "properties": {
                  "strategy": {
                  }
                },
                "type": "object"
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "AchievementCampaignRequestBody": {
        "title": "AchievementCampaign",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "type",
              "trigger",
              "translations",
              "activity",
              "rules",
              "achievementId"
            ],
            "properties": {
              "triggerStrategy": {
                "$ref": "#/components/schemas/TriggerStrategy"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "type": {
                "type": "string",
                "enum": [
                  "direct",
                  "referral"
                ]
              },
              "trigger": {
                "type": "string",
                "example": "achievement"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              },
              "achievementId": {
                "type": "string",
                "format": "uuid"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UniqueCodeCampaignRequestBody": {
        "title": "RedemptionCampaign",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "type",
              "trigger",
              "translations",
              "activity",
              "eventCodeAttribute",
              "codeGenerator",
              "rules",
              "generateCodes",
              "event"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "referral"
              },
              "trigger": {
                "type": "string",
                "example": "custom_event_unique_code"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "event": {
                "type": "string"
              },
              "eventCodeAttribute": {
                "type": "string",
                "example": "qrCode"
              },
              "generateCodes": {
                "type": "integer",
                "example": 100000
              },
              "codeGenerator": {
                "required": [
                  "characterSet",
                  "length"
                ],
                "properties": {
                  "characterSet": {
                    "type": "string",
                    "example": "alphanum"
                  },
                  "length": {
                    "type": "integer",
                    "example": 12
                  },
                  "prefix": {
                    "type": "string",
                    "example": "Code"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PutUniqueCodeCampaignRequestBody": {
        "title": "RedemptionCampaign",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "required": [
              "type",
              "trigger",
              "translations",
              "activity",
              "eventCodeAttribute",
              "codeGenerator",
              "rules"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "referral"
              },
              "trigger": {
                "type": "string",
                "example": "custom_event_unique_code"
              },
              "activity": {
                "required": [
                  "startsAt"
                ],
                "properties": {
                  "startsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00"
                  },
                  "endsAt": {
                    "type": "string",
                    "example": "2024-09-17 00:00+02:00",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "displayOrder": {
                "type": "number",
                "example": 1
              },
              "active": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "translations": {
                "$ref": "#/components/schemas/CampaignTranslations"
              },
              "rules": {
                "$ref": "#/components/schemas/Rule"
              },
              "limits": {
                "$ref": "#/components/schemas/Limit"
              },
              "visibility": {
                "$ref": "#/components/schemas/Visibility"
              },
              "audience": {
                "$ref": "#/components/schemas/Audience"
              },
              "event": {
                "type": "string"
              },
              "eventCodeAttribute": {
                "type": "string",
                "example": "qrCode"
              },
              "generateCodes": {
                "type": "integer",
                "example": 100000
              },
              "codeGenerator": {
                "required": [
                  "characterSet",
                  "length"
                ],
                "properties": {
                  "characterSet": {
                    "type": "string",
                    "example": "alphanum"
                  },
                  "length": {
                    "type": "integer",
                    "example": 12
                  },
                  "prefix": {
                    "type": "string",
                    "example": "Code"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Rule": {
        "type": "array",
        "items": {
          "required": [
            "effects"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "effects": {
              "type": "array",
              "items": {
                "required": [
                  "effect"
                ],
                "properties": {
                  "effect": {
                    "type": "string",
                    "enum": [
                      "give_points",
                      "give_reward",
                      "deduct_unit",
                      "assign_member_custom_attribute",
                      "remove_member_custom_attribute"
                    ]
                  },
                  "pointsRule": {
                    "description": "Only allowed for `give_points` and `deduct_unit` effect"
                  },
                  "walletCode": {
                    "description": "Only allowed for `give_points` and `deduct_unit` effect",
                    "type": "string"
                  },
                  "unitsLockRule": {
                    "description": "The field allows you to set a custom pending for units given by campaign effects. Only allowed for `give_points` effect",
                    "required": [
                      "lockStrategy"
                    ],
                    "properties": {
                      "lockStrategy": {
                        "type": "string",
                        "enum": [
                          "expression",
                          "from_wallet",
                          "no_pending"
                        ]
                      },
                      "expression": {
                        "description": "This field is required for `lockStrategy = expression`",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "unitsExpirationRule": {
                    "description": "The field allows you to set a custom expiration for units given by campaign effects. Only allowed for `give_points` effect",
                    "required": [
                      "expirationStrategy"
                    ],
                    "properties": {
                      "expirationStrategy": {
                        "type": "string",
                        "enum": [
                          "expression",
                          "from_wallet",
                          "never_expires"
                        ]
                      },
                      "expression": {
                        "description": "This field is required for `lockStrategy = expression`",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "rewardId": {
                    "description": "Only allowed for `give_reward` effect",
                    "type": "string",
                    "format": "uuid"
                  },
                  "couponValueRule": {
                    "description": "Only allowed for `give_reward` effect",
                    "type": "string"
                  },
                  "customAttributeKey": {
                    "description": "Only allowed for `assign_member_custom_attribute` effect",
                    "type": "string"
                  },
                  "customAttributeValueRule": {
                    "description": "Only allowed for `assign_member_custom_attribute` effect",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "conditions": {
              "type": "array",
              "items": {
                "required": [
                  "operator",
                  "data"
                ],
                "properties": {
                  "attribute": {
                    "type": "string"
                  },
                  "operator": {
                    "type": "string",
                    "enum": [
                      "expression",
                      "is_equal",
                      "has_at_least_one_label",
                      "contains",
                      "not_contains",
                      "is_not_equal",
                      "is_not_one_of",
                      "is_one_of",
                      "matches_regex",
                      "is_greater",
                      "is_greater_or_equal",
                      "is_less",
                      "is_less_or_equal",
                      "ends_with",
                      "starts_with",
                      "is_after",
                      "is_before",
                      "is_between",
                      "is_day_of_week",
                      "is_month_of_year",
                      "is_not_between",
                      "is_day_of_month",
                      "is_time_between",
                      "is_one_of_group_values",
                      "is_not_one_of_group_values",
                      "not_contains_one_of",
                      "contains_one_of"
                    ]
                  },
                  "data": {
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        }
      },
      "SimulatedCustomer": {
        "properties": {
          "id": {
            "description": "Unique Member identifier. Specifying an existing ID will cause the simulation to fetch the specific Member data for simulation purposes.",
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/CustomerAddressFormType"
          },
          "loyaltyCardNumber": {
            "type": "string"
          },
          "legalConsent": {
            "type": "boolean"
          },
          "marketingConsent": {
            "type": "boolean"
          },
          "dataProcessingConsent": {
            "type": "boolean"
          },
          "gender": {
            "type": "string"
          },
          "registeredDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelAchievementDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelId": {
            "type": "string",
            "format": "uuid"
          },
          "numberOfPurchases": {
            "type": "number"
          },
          "purchaseAmount": {
            "type": "number"
          },
          "averagePurchaseAmount": {
            "type": "number"
          },
          "activePoints": {
            "type": "number"
          },
          "spentPoints": {
            "type": "number"
          },
          "earnedPoints": {
            "type": "number"
          },
          "lockedPoints": {
            "type": "number"
          },
          "blockedPoints": {
            "type": "number"
          },
          "expiredPoints": {
            "type": "number"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "type": "object"
      },
      "SimulatedTransaction": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "grossValue": {
            "type": "number",
            "deprecated": true
          },
          "documentNumber": {
            "type": "string"
          },
          "linkedDocumentNumber": {
            "description": "Required only for `documentType = return`. The field indicates the transaction you want to return",
            "type": "string"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "sell",
              "return"
            ]
          },
          "purchasedAt": {
            "type": "string",
            "format": "date-time"
          },
          "purchasePlace": {
            "type": "string"
          },
          "shippingCity": {
            "type": "string",
            "deprecated": true
          },
          "channelId": {
            "type": "string",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "properties": {
                "sku": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "qty": {
                  "type": "number"
                },
                "grossValue": {
                  "type": "number"
                },
                "category": {
                  "type": "string"
                },
                "maker": {
                  "type": "string"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "SimulatedCustomEvent": {
        "properties": {
          "id": {
            "type": "object",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "SimulatedInternalEvent": {
        "properties": {
          "type": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "SimulateFormType": {
        "required": [
          "trigger"
        ],
        "properties": {
          "trigger": {
            "type": "string",
            "enum": [
              "transaction",
              "custom_event",
              "internal_event",
              "return_transaction"
            ]
          },
          "customer": {
            "$ref": "#/components/schemas/SimulatedCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimulatedCustomer"
          }
        },
        "type": "object"
      },
      "AvailableCampaign": {
        "required": [
          "campaignId",
          "name",
          "active",
          "activity",
          "rules",
          "translations",
          "createdAt",
          "displayOrder",
          "labels",
          "type",
          "trigger",
          "limitReached",
          "limits",
          "memberFilter",
          "limitUsages"
        ],
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "activity": {
            "required": [
              "startsAt"
            ],
            "properties": {
              "startsAt": {
                "type": "string",
                "example": "2024-09-17 00:00+02:00"
              },
              "endsAt": {
                "type": "string",
                "example": "2024-09-17 00:00+02:00",
                "nullable": true
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "rules": {
            "type": "array",
            "items": {
              "required": [
                "conditions",
                "effects"
              ],
              "properties": {
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "required": [
                      "effect"
                    ],
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limit"
          },
          "translations": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "name",
                "locale"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "memberFilter": {
            "type": "object"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "labels": {
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "multiLevel": {
            "type": "number",
            "example": 1
          },
          "codeGenerator": {
            "type": "object"
          },
          "eventCodeAttribute": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "relatedAchievement": {
            "$ref": "#/components/schemas/RelatedAchievement"
          },
          "limitReached": {
            "description": "This property indicates whether the limit for campaign is reached by member",
            "type": "boolean"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MemberAvailableCampaign": {
        "required": [
          "campaignId",
          "translations",
          "name",
          "limitReached"
        ],
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "relatedAchievement": {
            "$ref": "#/components/schemas/RelatedAchievement"
          },
          "limitReached": {
            "description": "This property indicates if the campaign is available to a member",
            "type": "boolean"
          },
          "limitUsages": {
            "properties": {
              "pointsPerMember": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "executionsPerMember": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomEventRequestBody": {
        "properties": {
          "event": {
            "required": [
              "type",
              "eventDate"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "customerData": {
                "description": "Not all fields of customerData are required, choose the one you want to identify with.",
                "properties": {
                  "customerId": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "loyaltyCardNumber": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "eventDate": {
                "type": "string",
                "format": "date-time"
              },
              "body": {
                "properties": {
                  "key": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "eventId": {
                "description": "A unique identifier for each custom event sent to the Open Loyalty API. This field is used to prevent the submission of duplicate events to the system.",
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CustomEvent": {
        "properties": {
          "customEventId": {
            "description": "Custom Event Id",
            "type": "string",
            "format": "uuid"
          },
          "customerId": {
            "description": "Customer Id",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "customerData": {
            "properties": {
              "customerId": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "body": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "description": "A unique identifier for each custom event sent to the Open Loyalty API. This field is used to prevent the submission of duplicate events to the system.",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true
          }
        },
        "type": "object"
      },
      "ExportCampaignCodeTypeRequestBody": {
        "title": "campaignCode",
        "properties": {
          "campaignCode": {
            "required": [
              "campaignId"
            ],
            "properties": {
              "campaignId": {
                "type": "string",
                "format": "uuid"
              },
              "code": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "unused",
                  "used"
                ]
              },
              "codeId": {
                "type": "string",
                "format": "uuid"
              },
              "usedByMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "createdAt": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatTimeCriteriaField"
                  },
                  {
                    "description": "Date and time when the member was registered"
                  }
                ]
              },
              "usedAt": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatTimeCriteriaField"
                  },
                  {
                    "description": "Date and time when the member was registered"
                  }
                ]
              },
              "_page": {
                "$ref": "#/components/schemas/ExportPage"
              },
              "_itemsOnPage": {
                "$ref": "#/components/schemas/ExportItemsOnPage"
              },
              "_orderBy": {
                "$ref": "#/components/schemas/ExportOrderBy"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ExportMemberTypeRequestBody": {
        "title": "member",
        "properties": {
          "member": {
            "properties": {
              "customerId": {
                "type": "string",
                "format": "uuid"
              },
              "active": {
                "type": "boolean"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "gender": {
                "type": "string",
                "enum": [
                  "female",
                  "male",
                  "not_disclosed"
                ]
              },
              "phone": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time"
              },
              "agreement1": {
                "type": "boolean"
              },
              "agreement2": {
                "type": "boolean"
              },
              "agreement3": {
                "type": "boolean"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "transactionsCount": {
                "type": "integer"
              },
              "transactionsAmount": {
                "type": "number",
                "format": "float"
              },
              "transactionsAmountWithoutDeliveryCosts": {
                "type": "number",
                "format": "float"
              },
              "amountExcludedForLevel": {
                "type": "number",
                "format": "float"
              },
              "averageTransactionAmount": {
                "type": "number",
                "format": "float"
              },
              "levelAchievementDate": {
                "type": "string",
                "format": "date-time"
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "lastTransactionDate": {
                "type": "string",
                "format": "date-time"
              },
              "registeredAt": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatTimeCriteriaField"
                  },
                  {
                    "description": "Date and time when the member was registered"
                  }
                ]
              },
              "firstTransactionDate": {
                "type": "string",
                "format": "date-time"
              },
              "levelId": {
                "type": "string",
                "format": "uuid"
              },
              "manuallyAssignedLevelId": {
                "type": "string",
                "format": "uuid"
              },
              "referralToken": {
                "type": "string"
              },
              "address:street": {
                "type": "string"
              },
              "address:address1": {
                "type": "string"
              },
              "address:address2": {
                "type": "string"
              },
              "address:province": {
                "type": "string"
              },
              "address:city": {
                "type": "string"
              },
              "address:postal": {
                "type": "string"
              },
              "address:country": {
                "type": "string"
              },
              "defaultAccount:activePoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:transferredPoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:lockedPoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:expiredPoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:spentPoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:earnedPoints": {
                "type": "number",
                "format": "float"
              },
              "defaultAccount:blockedPoints": {
                "type": "number",
                "format": "float"
              },
              "emailOrPhone": {
                "type": "string"
              },
              "_page": {
                "$ref": "#/components/schemas/ExportPage"
              },
              "_itemsOnPage": {
                "$ref": "#/components/schemas/ExportItemsOnPage"
              },
              "_orderBy": {
                "$ref": "#/components/schemas/ExportOrderBy"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ExportMemberTierTypeRequestBody": {
        "title": "memberTier",
        "properties": {
          "memberTier": {
            "required": [
              "tierId"
            ],
            "properties": {
              "tierId": {
                "type": "string",
                "format": "uuid"
              },
              "_page": {
                "$ref": "#/components/schemas/ExportPage"
              },
              "_itemsOnPage": {
                "$ref": "#/components/schemas/ExportItemsOnPage"
              },
              "_orderBy": {
                "$ref": "#/components/schemas/ExportOrderBy"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ExportMemberSegmentTypeRequestBody": {
        "title": "memberSegment",
        "properties": {
          "memberSegment": {
            "required": [
              "segmentId"
            ],
            "properties": {
              "segmentId": {
                "type": "string",
                "format": "uuid"
              },
              "_page": {
                "$ref": "#/components/schemas/ExportPage"
              },
              "_itemsOnPage": {
                "$ref": "#/components/schemas/ExportItemsOnPage"
              },
              "_orderBy": {
                "$ref": "#/components/schemas/ExportOrderBy"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ExportRewardFulfillmentTypeRequestBody": {
        "title": "rewardFulfillment",
        "properties": {
          "rewardFulfillment": {
            "properties": {
              "rewardId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "rewardType": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "costInPoints": {
                "type": "number",
                "format": "float"
              },
              "redemptionDate": {
                "type": "string",
                "format": "date-time"
              },
              "customerId": {
                "type": "string",
                "format": "uuid"
              },
              "customerData:email": {
                "type": "string"
              },
              "customerData:firstName": {
                "type": "string"
              },
              "customerData:lastName": {
                "type": "string"
              },
              "customerData:phone": {
                "type": "string"
              },
              "customerData:loyaltyCardNumber": {
                "type": "string"
              },
              "_page": {
                "$ref": "#/components/schemas/ExportPage"
              },
              "_itemsOnPage": {
                "$ref": "#/components/schemas/ExportItemsOnPage"
              },
              "_orderBy": {
                "$ref": "#/components/schemas/ExportOrderBy"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ExportId": {
        "required": [
          "exportId"
        ],
        "properties": {
          "exportId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "ExportItemsOnPage": {
        "description": "Items on one page",
        "type": "integer",
        "default": 10,
        "maximum": 50,
        "minimum": 1,
        "example": 25
      },
      "ExportOrderBy": {
        "description": "Sorting order. If sorting is not chosen, the rows will be returned in an unspecified order. Sort order: * `asc` - Ascending, from A to Z * `desc` - Descending, from Z to A",
        "type": "object",
        "example": {
          "fieldName": "desc"
        },
        "additionalProperties": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "ExportPage": {
        "description": "Number of page with results, starts from 1",
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "example": 1
      },
      "Import": {
        "required": [
          "importId",
          "type",
          "uploadedDate",
          "fileName",
          "itemsToImport",
          "user"
        ],
        "properties": {
          "importId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "member",
              "groupValue",
              "segmentMembers",
              "unitTransferAdding",
              "unitTransferSpending",
              "transaction"
            ]
          },
          "uploadedDate": {
            "type": "string",
            "format": "date-time"
          },
          "fileName": {
            "type": "string"
          },
          "itemsToImport": {
            "type": "integer"
          },
          "user": {
            "type": "string",
            "format": "uuid"
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ImportItem": {
        "required": [
          "importId",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "importId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "inprogress",
              "succeed",
              "error",
              "failed"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "entity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityMember"
              },
              {
                "$ref": "#/components/schemas/EntityMember"
              },
              {
                "title": "Collection",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "data": {
                    "required": [
                      "value",
                      "groupOfValuesId"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "groupOfValuesId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object"
              },
              {
                "title": "Unit transfer adding",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "data": {
                    "required": [
                      "walletCode",
                      "unitSingularName",
                      "unitPluralName",
                      "value",
                      "registeredOn",
                      "createdOn",
                      "isPending",
                      "memberId",
                      "memberFullName"
                    ],
                    "properties": {
                      "walletName": {
                        "type": "string"
                      },
                      "walletCode": {
                        "type": "string"
                      },
                      "unitSingularName": {
                        "type": "string"
                      },
                      "unitPluralName": {
                        "type": "string"
                      },
                      "value": {
                        "type": "number",
                        "format": "float"
                      },
                      "comment": {
                        "type": "string"
                      },
                      "registeredOn": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "createdOn": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "isPending": {
                        "type": "boolean"
                      },
                      "expireAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "memberId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "memberFullName": {
                        "type": "string"
                      },
                      "memberEmail": {
                        "type": "string",
                        "format": "email"
                      },
                      "memberLoyaltyCardNumber": {
                        "type": "string"
                      },
                      "memberPhone": {
                        "type": "string"
                      },
                      "externalTransferId": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object"
              },
              {
                "title": "Unit transfer spending",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "data": {
                    "required": [
                      "walletCode",
                      "unitSingularName",
                      "unitPluralName",
                      "value",
                      "registeredOn",
                      "createdOn",
                      "memberId",
                      "memberFullName"
                    ],
                    "properties": {
                      "walletName": {
                        "type": "string"
                      },
                      "walletCode": {
                        "type": "string"
                      },
                      "unitSingularName": {
                        "type": "string"
                      },
                      "unitPluralName": {
                        "type": "string"
                      },
                      "value": {
                        "type": "number",
                        "format": "float"
                      },
                      "comment": {
                        "type": "string"
                      },
                      "registeredOn": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "createdOn": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "memberId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "memberFullName": {
                        "type": "string"
                      },
                      "memberEmail": {
                        "type": "string",
                        "format": "email"
                      },
                      "memberLoyaltyCardNumber": {
                        "type": "string"
                      },
                      "memberPhone": {
                        "type": "string"
                      },
                      "externalTransferId": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object"
              },
              {
                "title": "Transaction",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "data": {
                    "required": [
                      "documentType",
                      "purchasedAt",
                      "grossValue"
                    ],
                    "properties": {
                      "documentType": {
                        "type": "string"
                      },
                      "purchasedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "grossValue": {
                        "type": "number",
                        "format": "float"
                      },
                      "memberFullName": {
                        "type": "string"
                      },
                      "memberEmail": {
                        "type": "string"
                      },
                      "memberLoyaltyCardNumber": {
                        "type": "string"
                      },
                      "memberPhone": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "EntityMember": {
        "properties": {
          "id": {
            "type": "string"
          },
          "data": {
            "properties": {
              "email": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object"
      },
      "AssignedTransactionToCustomer": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AssignedTransactionToCustomer"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "transactionId",
              "documentType",
              "documentNumber",
              "grossValue"
            ],
            "properties": {
              "transactionId": {
                "type": "string"
              },
              "documentType": {
                "type": "string"
              },
              "documentNumber": {
                "type": "string"
              },
              "grossValue": {
                "type": "integer"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomerWasActivated": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomerWasActivated"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomerWasAnonymized": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomerWasAnonymized"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomerWasDeactivated": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomerWasDeactivated"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomerWasMovedToLevel": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomerWasMovedToLevel"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "manually",
              "removedManually"
            ],
            "properties": {
              "newLevelId": {
                "type": "string"
              },
              "newLevelName": {
                "type": "string"
              },
              "tierSetId": {
                "type": "string"
              },
              "tierSetName": {
                "type": "string"
              },
              "manually": {
                "type": "boolean"
              },
              "removedManually": {
                "type": "boolean"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomerWasRegistered": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomerWasRegistered"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PendingPointsWereAdded": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PendingPointsWereAdded"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points",
              "transferId",
              "walletId",
              "walletTypeCode",
              "walletUnitSingularName",
              "walletUnitPluralName",
              "activePoints"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              },
              "comment": {
                "type": "string"
              },
              "transferId": {
                "type": "string"
              },
              "walletId": {
                "type": "string"
              },
              "walletTypeCode": {
                "type": "string"
              },
              "walletTypeName": {
                "type": "string"
              },
              "walletUnitSingularName": {
                "type": "string"
              },
              "walletUnitPluralName": {
                "type": "string"
              },
              "activePoints": {
                "type": "integer"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PendingPointsWereCanceled": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PendingPointsWereCanceled"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereAdded": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereAdded"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points",
              "transferId",
              "walletId",
              "walletTypeCode",
              "walletUnitSingularName",
              "walletUnitPluralName",
              "activePoints"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              },
              "comment": {
                "type": "string"
              },
              "transferId": {
                "type": "string"
              },
              "walletId": {
                "type": "string"
              },
              "walletTypeCode": {
                "type": "string"
              },
              "walletTypeName": {
                "type": "string"
              },
              "walletUnitSingularName": {
                "type": "string"
              },
              "walletUnitPluralName": {
                "type": "string"
              },
              "activePoints": {
                "type": "integer"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereBlocked": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereBlocked"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereCanceled": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereCanceled"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereExpired": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereExpired"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereSpent": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereSpent"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereTransferred": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereTransferred"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              },
              "receiverFirstName": {
                "type": "string"
              },
              "receiverLastName": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereUnblocked": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereUnblocked"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PointsWereUnlocked": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PointsWereUnlocked"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "points",
              "transferId",
              "walletId",
              "walletTypeCode",
              "walletUnitSingularName",
              "walletUnitPluralName",
              "activePoints"
            ],
            "properties": {
              "points": {
                "type": "number",
                "format": "float"
              },
              "comment": {
                "type": "string"
              },
              "transferId": {
                "type": "string"
              },
              "walletId": {
                "type": "string"
              },
              "walletTypeCode": {
                "type": "string"
              },
              "walletTypeName": {
                "type": "string"
              },
              "walletUnitSingularName": {
                "type": "string"
              },
              "walletUnitPluralName": {
                "type": "string"
              },
              "activePoints": {
                "type": "integer"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "RewardWasBought": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "RewardWasBought"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "issuedRewardId",
              "rewardId"
            ],
            "properties": {
              "rewardName": {
                "type": "string"
              },
              "issuedRewardId": {
                "type": "string"
              },
              "rewardId": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "AchievementCompleted": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AchievementCompleted"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "adminId",
              "achievementName",
              "achievementId",
              "manuallyEdited"
            ],
            "properties": {
              "adminId": {
                "type": "string"
              },
              "manuallyEdited": {
                "type": "boolean"
              },
              "achievementName": {
                "type": "string"
              },
              "achievementId": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MemberAchievementCompletionCountWasDecreased": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MemberAchievementCompletionCountWasDecreased"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "adminId",
              "previousCompletionCount",
              "currentCompletionCount",
              "achievementName",
              "achievementId"
            ],
            "properties": {
              "adminId": {
                "type": "string"
              },
              "previousCompletionCount": {
                "type": "integer"
              },
              "currentCompletionCount": {
                "type": "integer"
              },
              "achievementName": {
                "type": "string"
              },
              "achievementId": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MemberAchievementProgressWasChanged": {
        "required": [
          "customerId",
          "type",
          "createdAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MemberAchievementProgressWasChanged"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "flatVariables": {
            "required": [
              "adminId",
              "achievementName",
              "achievementId"
            ],
            "properties": {
              "adminId": {
                "type": "string"
              },
              "achievementName": {
                "type": "string"
              },
              "achievementId": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "RedemptionStatusRequestBody": {
        "properties": {
          "status": {
            "description": "Current status of the redemeed reward. By default, all rewards are redeemed with issued status.",
            "type": "string",
            "enum": [
              "issued",
              "pending",
              "approved",
              "packing",
              "awaiting_shipping",
              "shipped",
              "returned",
              "completed",
              "canceled",
              "rejected"
            ]
          },
          "comment": {
            "description": "Comment related to the status change (optional).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RewardResponse": {
        "properties": {
          "reward": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "levels": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "brandIcon": {
            "type": "boolean"
          },
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "costInPoints": {
            "type": "number"
          },
          "activity": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "visibility": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "tax": {
            "type": "number"
          },
          "taxPriceValue": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "properties": {
              "general": {
                "type": "number"
              },
              "perUser": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "fulfillmentTracking": {
            "type": "boolean",
            "deprecated": true
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "couponGenerator": {
            "properties": {
              "length": {
                "type": "number"
              },
              "characterSet": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "couponValue": {
            "type": "number"
          },
          "segmentNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "levelNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "categoryNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "usageLeft": {
            "type": "number"
          },
          "usageLeftForCustomer": {
            "type": "number"
          },
          "unitsConversion": {
            "properties": {
              "ratio": {
                "type": "number",
                "format": "float"
              },
              "rounding": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "default"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MemberRewardResponse": {
        "required": [
          "reward",
          "brandIcon",
          "rewardId",
          "active",
          "labels",
          "featured",
          "public",
          "photos",
          "createdAt",
          "translations",
          "segmentNames",
          "levelNames",
          "categoryNames"
        ],
        "properties": {
          "reward": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "levels": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "brandIcon": {
            "type": "boolean"
          },
          "canBeBoughtByCustomer": {
            "type": "boolean"
          },
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "costInPoints": {
            "type": "number"
          },
          "activity": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "visibility": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "tax": {
            "type": "number"
          },
          "taxPriceValue": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "properties": {
              "general": {
                "type": "number"
              },
              "perUser": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "fulfillmentTracking": {
            "type": "boolean",
            "deprecated": true
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "couponGenerator": {
            "properties": {
              "length": {
                "type": "number"
              },
              "characterSet": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "couponValue": {
            "type": "number"
          },
          "segmentNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "levelNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "categoryNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "usageLeft": {
            "type": "number"
          },
          "usageLeftForCustomer": {
            "type": "number"
          },
          "unitsConversion": {
            "properties": {
              "ratio": {
                "type": "number",
                "format": "float"
              },
              "rounding": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "default"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GeneralRewardRequestBody": {
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object"
      },
      "CouponGeneralRewardRequestBody": {
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object"
      },
      "UpdateMaterialRewardRequestBody": {
        "title": "Material",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit"
        ],
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "fulfillmentTracking": {
            "type": "boolean"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UpdateStaticCouponRewardRequestBody": {
        "title": "Static coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "couponValue"
        ],
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "couponValueType": {
            "description": "Coupon value type (if empty, money will be default).",
            "type": "string",
            "enum": [
              "money",
              "percentage"
            ]
          },
          "couponValue": {
            "description": "Coupon value * `money` - Money value greater than 0 * `percentage` - Percentage value 0 - 100\n",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UpdateDynamicCouponRewardRequestBody": {
        "title": "Dynamic coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit"
        ],
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "UpdateConversionCouponRewardRequestBody": {
        "title": "Conversion coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "unitsConversion"
        ],
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "unitsConversion": {
            "required": [
              "rounding",
              "ratio"
            ],
            "properties": {
              "rounding": {
                "type": "string",
                "enum": [
                  "default",
                  "up",
                  "down"
                ]
              },
              "ratio": {
                "type": "number",
                "format": "float",
                "minimum": 0,
                "example": 0.45
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateMaterialRewardRequestBody": {
        "title": "Material",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "reward"
        ],
        "properties": {
          "reward": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "fulfillmentTracking": {
            "type": "boolean"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateStaticCouponRewardRequestBody": {
        "title": "Static coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "couponValue",
          "reward"
        ],
        "properties": {
          "reward": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "couponValueType": {
            "description": "Coupon value type (if empty, money will be default).",
            "type": "string",
            "enum": [
              "money",
              "percentage"
            ]
          },
          "couponValue": {
            "description": "Coupon value * `money` - Money value greater than 0 * `percentage` - Percentage value 0 - 100\n",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateDynamicCouponRewardRequestBody": {
        "title": "Dynamic coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "reward"
        ],
        "properties": {
          "reward": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateConversionCouponRewardRequestBody": {
        "title": "Conversion coupon",
        "required": [
          "translations",
          "activity",
          "visibility",
          "usageLimit",
          "unitsConversion",
          "reward"
        ],
        "properties": {
          "reward": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Reward name",
                    "type": "string"
                  },
                  "shortDescription": {
                    "description": "Reward short description",
                    "type": "string"
                  },
                  "usageInstruction": {
                    "description": "Reward usage instruction",
                    "type": "string"
                  },
                  "conditionsDescription": {
                    "description": "Reward conditions description",
                    "type": "string"
                  },
                  "brandDescription": {
                    "description": "Brand description",
                    "type": "string"
                  },
                  "brandName": {
                    "description": "Brand description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "categories": {
            "description": "Categories",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "tax": {
            "description": "Price tax",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": 23
          },
          "price": {
            "description": "Price",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 200
          },
          "taxPriceValue": {
            "description": "Tax price value",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 46
          },
          "active": {
            "type": "boolean"
          },
          "target": {
            "description": "Link to tiers or segments:\n\n\n * `level` - Property `levels` is required\n * `segment` - Property `segments` is required\n",
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "description": "Selects specific segments of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "sourceWalletTypeCode": {
            "description": "Wallet code as a source of units",
            "type": "string",
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "daysInactive": {
            "description": "Inactive coupon period after redeem in days",
            "type": "number",
            "format": "int32"
          },
          "daysValid": {
            "description": "Active coupon period after redeem in days. Not valid if dateValid is defined.",
            "type": "number",
            "format": "int32"
          },
          "dateValid": {
            "description": "Active coupon period after redeem in days",
            "type": "string",
            "format": "date-time"
          },
          "couponGenerator": {
            "description": "If defined then coupon will be generated automatically based on defined strategy. Otherwise must be import manually.",
            "required": [
              "length",
              "characterSet"
            ],
            "properties": {
              "length": {
                "description": "Length of coupon",
                "type": "number"
              },
              "characterSet": {
                "type": "string",
                "enum": [
                  "alphanum",
                  "alpha",
                  "num"
                ]
              },
              "prefix": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "unitsConversion": {
            "required": [
              "rounding",
              "ratio"
            ],
            "properties": {
              "rounding": {
                "type": "string",
                "enum": [
                  "default",
                  "up",
                  "down"
                ]
              },
              "ratio": {
                "type": "number",
                "format": "float",
                "minimum": 0,
                "example": 0.45
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "StoreResponse": {
        "description": "Store",
        "required": [
          "storeId",
          "code",
          "currency",
          "name",
          "active"
        ],
        "properties": {
          "storeId": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "example": "DEFAULT"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TiersListPut": {
        "type": "array",
        "items": {
          "required": [
            "conditions",
            "translations"
          ],
          "properties": {
            "levelId": {
              "description": "Leave empty to add a new tier. Use existing id to update specific tier.",
              "type": "string",
              "format": "uuid"
            },
            "translations": {
              "$ref": "#/components/schemas/Translations"
            },
            "active": {
              "description": "Tier availability",
              "type": "boolean"
            },
            "conditions": {
              "description": "Conditions are determined by the tier set configuration",
              "type": "array",
              "items": {
                "required": [
                  "conditionId",
                  "value"
                ],
                "properties": {
                  "conditionId": {
                    "description": "Relevant conditionId from the tier set configuration",
                    "type": "string",
                    "format": "uuid"
                  },
                  "value": {
                    "description": "Minimal value for the tier. Remember it must not be lower than the lower tier\u2019s value.",
                    "type": "number",
                    "format": "float"
                  }
                },
                "type": "object"
              }
            },
            "rewards": {
              "description": "Lifetime benefits associated with tier.",
              "type": "array",
              "items": {
                "required": [
                  "name",
                  "code"
                ],
                "properties": {
                  "rewardId": {
                    "description": "Reward ID. Leave empty to to add a new benefit.",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "description": "Benefit name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Benefit value.",
                    "type": "number",
                    "format": "float"
                  },
                  "code": {
                    "description": "Benefit code.",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Custom attributes",
                    "type": "array",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Custom attribute key",
                          "type": "string"
                        },
                        "value": {
                          "description": "Custom attribute value",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "active": {
                    "description": "Benefit availability",
                    "type": "boolean"
                  },
                  "startAt": {
                    "description": "Benefit availability start date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "endAt": {
                    "description": "Benefit availability end date",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "TierSetResponse": {
        "required": [
          "tierSetId",
          "name",
          "createdAt",
          "updatedAt",
          "conditions",
          "isMigrated",
          "isDefault"
        ],
        "properties": {
          "tierSetId": {
            "description": "Tier set name id.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Tier set name.",
            "type": "string"
          },
          "description": {
            "description": "Tier set description.",
            "type": "string"
          },
          "active": {
            "description": "The filed shows if tier set is active.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Tier set created at date.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Tier set updated at date.",
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "conditions": {
            "description": "Condition settings for a given tier set",
            "type": "array",
            "items": {
              "required": [
                "id",
                "attribute"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "attribute": {
                  "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                  "type": "string",
                  "enum": [
                    "activeUnits",
                    "totalEarnedUnits",
                    "monthsSinceJoiningProgram",
                    "totalSpending"
                  ]
                },
                "walletType": {
                  "description": "This field is occur for attributes related to units",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "tiers": {
            "description": "This field return tiers belong to tier set",
            "type": "array",
            "items": {
              "required": [
                "levelId",
                "name",
                "active"
              ],
              "properties": {
                "levelId": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "active": {
                  "description": "The field shows whether the tier is active"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "translations": {
            "$ref": "#/components/schemas/Translations"
          },
          "isMigrated": {
            "description": "This field shows whether the tier set has been migrated from the old tier system",
            "type": "boolean"
          },
          "isDefault": {
            "description": "This field shows which tier set was added first, which means that the tier set is default",
            "type": "boolean"
          },
          "downgrade": {
            "$ref": "#/components/schemas/TierSetDowngrade"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TierSetResponseList": {
        "required": [
          "tierSetId",
          "name",
          "translations",
          "active",
          "conditions",
          "downgrade",
          "createdAt",
          "updatedAt",
          "isMigrated",
          "tiers",
          "labels",
          "isDefault"
        ],
        "properties": {
          "tierSetId": {
            "description": "Tier set id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Tier set name",
            "type": "string"
          },
          "description": {
            "description": "Tier set description",
            "type": "string"
          },
          "active": {
            "description": "The field shows whether the tier set is active",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Tier set created at date",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Tier set updated at date",
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "conditions": {
            "description": "Conditions are determined by the tier set configuration",
            "type": "array",
            "items": {
              "required": [
                "id",
                "attribute"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "attribute": {
                  "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                  "type": "string",
                  "enum": [
                    "activeUnits",
                    "totalEarnedUnits",
                    "monthsSinceJoiningProgram",
                    "totalSpending"
                  ]
                },
                "walletType": {
                  "description": "This field occurs for attributes related to units",
                  "type": "string",
                  "example": "default"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "tiers": {
            "description": "This field return tiers belong to tier set",
            "type": "array",
            "items": {
              "required": [
                "levelId",
                "name",
                "active"
              ],
              "properties": {
                "levelId": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "active": {
                  "description": "The field shows whether the tier is active"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "translations": {
            "$ref": "#/components/schemas/Translations"
          },
          "isMigrated": {
            "description": "This field shows whether the tier set has been migrated from the old tier system",
            "type": "boolean"
          },
          "isDefault": {
            "description": "This field shows which tier set was added first, which means that the tier set is default",
            "type": "boolean"
          },
          "downgrade": {
            "$ref": "#/components/schemas/TierSetDowngrade"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TierResponse": {
        "required": [
          "levelId",
          "name",
          "hasPhoto",
          "storeCode",
          "active",
          "rewards",
          "translations",
          "createdAt",
          "updatedAt",
          "sortOrder",
          "isDefault",
          "conditions"
        ],
        "properties": {
          "levelId": {
            "description": "This field show tier id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "This field show tier name",
            "type": "string"
          },
          "description": {
            "description": "This field show tier description",
            "type": "string"
          },
          "hasPhoto": {
            "description": "This field show if tier have photo",
            "type": "boolean"
          },
          "storeCode": {
            "description": "The field shows what store tier it is in",
            "type": "string"
          },
          "tierSet": {
            "description": "This field shows related tier set",
            "required": [
              "tierSetId",
              "name"
            ],
            "properties": {
              "tierSetId": {
                "description": "This field shows tier set id",
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "description": "This field shows tier set name",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "conditions": {
            "description": "This field shows conditions that member must meet to be at this tier",
            "type": "array",
            "items": {
              "required": [
                "conditionId",
                "attribute",
                "value"
              ],
              "properties": {
                "conditionId": {
                  "type": "string",
                  "format": "uuid"
                },
                "attribute": {
                  "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                  "enum": [
                    "activeUnits",
                    "totalEarnedUnits",
                    "monthsSinceJoiningProgram",
                    "totalSpending"
                  ]
                },
                "value": {
                  "description": "This field shows the value that was specified for the attribute",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "active": {
            "description": "The field shows whether the tier is active",
            "type": "boolean"
          },
          "rewards": {
            "description": "Lifetime benefits associated with tier.",
            "type": "array",
            "items": {
              "required": [
                "rewardId",
                "name",
                "code",
                "active",
                "createdAt",
                "updatedAt"
              ],
              "properties": {
                "rewardId": {
                  "description": "Reward ID.",
                  "required": [
                    "rewardId"
                  ],
                  "properties": {
                    "rewardId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "Benefit name.",
                  "type": "string"
                },
                "value": {
                  "description": "Benefit value.",
                  "type": "number",
                  "format": "float"
                },
                "code": {
                  "description": "Benefit code.",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/Labels"
                },
                "active": {
                  "description": "Benefit availability",
                  "type": "boolean"
                },
                "startAt": {
                  "description": "Benefit availability start date",
                  "type": "string",
                  "format": "date-time"
                },
                "endAt": {
                  "description": "Benefit availability end date",
                  "type": "string",
                  "format": "date-time"
                },
                "createdAt": {
                  "description": "Benefit created at date",
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "description": "Benefit updated at date",
                  "type": "string",
                  "format": "date-time"
                },
                "createdBy": {
                  "description": "Benefit created by",
                  "type": "string",
                  "format": "uuid"
                },
                "updatedBy": {
                  "description": "Benefit updated by",
                  "type": "string",
                  "format": "uuid"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "sortOrder": {
            "description": "This field shows order of tiers, the higher the number, the higher the tier.",
            "type": "number"
          },
          "isDefault": {
            "description": "This field shows whether the tier is the default tier that was created automatically along with the tier set. Tier serves as the starting tier in tie set",
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "locale"
              ],
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "createdAt": {
            "description": "tier created at date",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "tier updated at date",
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "description": "tier created by",
            "type": "string",
            "format": "uuid"
          },
          "updatedBy": {
            "description": "tier updated by",
            "type": "string",
            "format": "uuid"
          },
          "conditionValue": {
            "type": "number",
            "format": "float",
            "deprecated": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MemberTierSet": {
        "required": [
          "currentTierId",
          "tierSetId",
          "tierSetName",
          "currentTierName",
          "manually"
        ],
        "properties": {
          "currentTierId": {
            "description": "Current member tier for tier set",
            "type": "string",
            "format": "uuid"
          },
          "tierSetId": {
            "description": "Tier set Id",
            "type": "string",
            "format": "uuid"
          },
          "tierSetName": {
            "description": "Tier set name",
            "type": "string"
          },
          "currentTierName": {
            "description": "Tier name",
            "type": "string"
          },
          "manually": {
            "description": "The field will indicate whether a given tier in tier set has been assigned manually",
            "type": "boolean"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TierSetTiersResponse": {
        "required": [
          "levelId",
          "tierSet",
          "name",
          "storeCode",
          "active",
          "rewards",
          "createdAt",
          "updatedAt",
          "translations",
          "isDefault",
          "hasPhoto",
          "conditions"
        ],
        "properties": {
          "levelId": {
            "description": "This field show tier id",
            "type": "string",
            "format": "uuid"
          },
          "tierSet": {
            "description": "This field shows related tier set",
            "required": [
              "tierSetId",
              "name"
            ],
            "properties": {
              "tierSetId": {
                "properties": {
                  "tierSetId": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "name": {
            "description": "This field show tier name",
            "type": "string"
          },
          "description": {
            "description": "This field show tier description",
            "type": "string"
          },
          "storeCode": {
            "description": "The field shows what store tier it is in",
            "type": "string"
          },
          "active": {
            "description": "The field shows whether the tier is active",
            "type": "boolean"
          },
          "rewards": {
            "type": "array",
            "items": {
              "required": [
                "rewardId",
                "name",
                "code",
                "active",
                "createdAt",
                "updatedAt"
              ],
              "properties": {
                "rewardId": {
                  "description": "Reward ID.",
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "description": "Benefit name.",
                  "type": "string"
                },
                "value": {
                  "description": "Benefit value.",
                  "type": "number",
                  "format": "float"
                },
                "code": {
                  "description": "Benefit code.",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/Labels"
                },
                "active": {
                  "type": "boolean"
                },
                "startAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "endAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "updatedBy": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "conditions": {
            "description": "This field shows conditions that member must meet to be at this tier",
            "type": "array",
            "items": {
              "required": [
                "conditionId",
                "attribute",
                "value"
              ],
              "properties": {
                "conditionId": {
                  "type": "string",
                  "format": "uuid"
                },
                "attribute": {
                  "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                  "enum": [
                    "activeUnits",
                    "totalEarnedUnits",
                    "monthsSinceJoiningProgram",
                    "totalSpending"
                  ]
                },
                "value": {
                  "description": "This field shows the value that was specified for the attribute",
                  "type": "number",
                  "format": "float"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "translations": {
            "$ref": "#/components/schemas/Translations"
          },
          "createdAt": {
            "description": "This field shows date then tier was created at",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "This field shows date then tier was updated at",
            "type": "string",
            "format": "date-time"
          },
          "hasPhoto": {
            "description": "This field show if tier have photo",
            "type": "boolean"
          },
          "conditionValue": {
            "type": "number",
            "format": "float",
            "deprecated": true
          },
          "isDefault": {
            "description": "This field shows whether the tier is the default tier that was created automatically along with the tier set. Tier serves as the starting tier in tie set",
            "type": "boolean"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TierSetMemberProgress": {
        "required": [
          "tierSetId",
          "tierSetName",
          "downgrade",
          "manually",
          "nextTierCurrentProgress"
        ],
        "properties": {
          "currentTierId": {
            "description": "The field displays the member's current tier id",
            "type": "string",
            "format": "uuid"
          },
          "currentTierName": {
            "description": "The field displays the member's current tier name",
            "type": "string"
          },
          "nextTierId": {
            "description": "The field displays the member's next tier id",
            "type": "string",
            "format": "uuid"
          },
          "nextTierName": {
            "description": "The field displays the member's next tier name",
            "type": "string"
          },
          "tierSetId": {
            "description": "The field will show the tierSet id in which the tier is located",
            "type": "string",
            "format": "uuid"
          },
          "tierSetName": {
            "description": "The field will show the tierSet id in which the tier is located",
            "type": "string"
          },
          "currentProgress": {
            "description": "Shows you your current progress percentage and what progress you are missing to reach the next tier",
            "type": "number",
            "format": "double"
          },
          "lastPromotionAt": {
            "description": "Shows when the last promotion to a higher tier occurred",
            "type": "string",
            "format": "date-time"
          },
          "lastDowngradeAt": {
            "description": "Shows when the last downgrade to a lower tier occurred",
            "type": "string",
            "format": "date-time"
          },
          "nextRecalculationAt": {
            "description": "Shows the date of the next recalculation",
            "type": "string",
            "format": "date-time"
          },
          "manually": {
            "description": "Shows whether the current tier has been assigned manually",
            "type": "boolean"
          },
          "downgrade": {
            "description": "Shows downgrade mode",
            "type": "string"
          },
          "nextTierCurrentProgress": {
            "type": "array",
            "items": {
              "required": [
                "conditionId",
                "attribute"
              ],
              "properties": {
                "conditionId": {
                  "description": "Shows conditions id",
                  "type": "string",
                  "format": "uuid"
                },
                "attribute": {
                  "description": "The field shows condition attribute",
                  "type": "string",
                  "enum": [
                    "activeUnits",
                    "totalEarnedUnits",
                    "monthsSinceJoiningProgram",
                    "totalSpending"
                  ]
                },
                "currentValue": {
                  "description": "The field shows your current value for condition attribute",
                  "type": "number",
                  "format": "float"
                },
                "valueGoal": {
                  "description": "The field shows what value to aim for to reach the next level",
                  "type": "number",
                  "format": "float"
                },
                "walletType": {
                  "description": "This field shows chosen wallet only for attributes related to units",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PostTierSet": {
        "required": [
          "tierSet"
        ],
        "properties": {
          "tierSet": {
            "required": [
              "translations",
              "conditions"
            ],
            "properties": {
              "translations": {
                "$ref": "#/components/schemas/Translations"
              },
              "active": {
                "description": "The field determines whether the tier set will be active",
                "type": "boolean"
              },
              "labels": {
                "$ref": "#/components/schemas/Labels"
              },
              "conditions": {
                "description": "Conditions settings",
                "type": "array",
                "items": {
                  "required": [
                    "attribute"
                  ],
                  "properties": {
                    "attribute": {
                      "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                      "type": "string",
                      "enum": [
                        "activeUnits",
                        "totalEarnedUnits",
                        "monthsSinceJoiningProgram",
                        "totalSpending"
                      ]
                    },
                    "walletType": {
                      "description": "This field is only required for attributes related to units",
                      "type": "string",
                      "example": "default"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "example": [
                  {
                    "attribute": "activeUnits",
                    "walletType": "default"
                  },
                  {
                    "attribute": "totalEarnedUnits",
                    "walletType": "default"
                  },
                  {
                    "attribute": "monthsSinceJoiningProgram"
                  }
                ]
              },
              "downgrade": {
                "$ref": "#/components/schemas/Downgrade"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PutTierSet": {
        "required": [
          "tierSet"
        ],
        "properties": {
          "tierSet": {
            "required": [
              "translations",
              "conditions"
            ],
            "properties": {
              "translations": {
                "$ref": "#/components/schemas/Translations"
              },
              "active": {
                "description": "The field determines whether the tier set will be active",
                "type": "boolean"
              },
              "labels": {
                "$ref": "#/components/schemas/Labels"
              },
              "conditions": {
                "type": "array",
                "items": {
                  "required": [
                    "attribute"
                  ],
                  "properties": {
                    "id": {
                      "description": "Leave empty to add a new condition. Use existing id to update specific condition.",
                      "type": "string",
                      "format": "uuid"
                    },
                    "attribute": {
                      "description": "Specifies the type of attribute. The possible values are:\n- `activeUnits`: The number of units currently active. - `totalEarnedUnits`: The total number of units earned. - `monthsSinceJoiningProgram`: The number of months since the program was joined. - `totalSpending`: The total amount of spending.\n",
                      "type": "string",
                      "enum": [
                        "activeUnits",
                        "totalEarnedUnits",
                        "monthsSinceJoiningProgram",
                        "totalSpending"
                      ]
                    },
                    "walletType": {
                      "description": "This field is only required for attributes related to units",
                      "type": "string",
                      "example": "default"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "downgrade": {
                "$ref": "#/components/schemas/Downgrade"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Labels": {
        "description": "A list of custom attributes used for tagging and describing resources. Each item in the list contains a key-value pair, where `key` is the name of the attribute, and `value` is the value assigned to that attribute.\n",
        "type": "array",
        "items": {
          "required": [
            "key",
            "value"
          ],
          "properties": {
            "key": {
              "description": "The name of the custom attribute.",
              "type": "string"
            },
            "value": {
              "description": "The value assigned to the custom attribute.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "Downgrade": {
        "description": "Downgrade settings",
        "properties": {
          "mode": {
            "description": "Specifies the mode of downgrade. The possible values are:\n- `none`: Downgrade will not occur. - `automatic`: Downgrade will occur automatically when the conditions for being at a given tier are not met. - `periodic`: Downgrade will occur periodically. If this mode is selected, you must also choose a `period`.\n",
            "type": "string",
            "enum": [
              "none",
              "automatic",
              "periodic"
            ]
          },
          "period": {
            "description": "Specifies the period for periodic downgrades. This is only available when the mode is set to `periodic`.\n",
            "type": "string",
            "enum": [
              "registration_anniversary"
            ]
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PostTransaction": {
        "properties": {
          "transaction": {
            "required": [
              "header",
              "items"
            ],
            "properties": {
              "customerData": {
                "properties": {
                  "customerId": {
                    "type": "string"
                  },
                  "address": {
                    "$ref": "#/components/schemas/CustomerAddressFormType"
                  },
                  "email": {
                    "type": "string"
                  },
                  "loyaltyCardNumber": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nip": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "items": {
                "type": "array",
                "items": {
                  "required": [
                    "sku",
                    "name",
                    "quantity",
                    "grossValue",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "grossValue": {
                      "type": "number",
                      "format": "float"
                    },
                    "maker": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "integer"
                    },
                    "sku": {
                      "type": "string"
                    },
                    "labels": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransactionLabelFormType"
                      }
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "channelId": {
                "type": "string",
                "format": "uuid"
              },
              "header": {
                "required": [
                  "documentNumber",
                  "purchasedAt"
                ],
                "properties": {
                  "documentNumber": {
                    "description": "Specifies the document number used in the transaction.",
                    "type": "string"
                  },
                  "linkedDocumentNumber": {
                    "description": "Used only for return transactions and refers to the original \u2018sell\u2019 document.",
                    "type": "string"
                  },
                  "documentType": {
                    "type": "string",
                    "enum": [
                      "sell",
                      "return"
                    ]
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TransactionLabelFormType"
                    }
                  },
                  "purchasedAt": {
                    "type": "string"
                  },
                  "purchasePlace": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Transaction": {
        "properties": {
          "grossValue": {
            "type": "number",
            "format": "float",
            "example": 3
          },
          "metrics": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "number",
                  "format": "float",
                  "example": 1
                },
                "calculatedAt": {
                  "format": "date-time"
                }
              },
              "type": "object"
            }
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "customerData": {
            "properties": {
              "customerId": {
                "type": "string",
                "format": "uuid"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "example@example.com"
              },
              "name": {
                "type": "string"
              },
              "nip": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/CustomerAddressFormType"
              }
            },
            "type": "object"
          },
          "items": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                },
                "grossValue": {
                  "type": "number",
                  "format": "float",
                  "example": 1
                },
                "category": {
                  "type": "string"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "maker": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "header": {
            "properties": {
              "documentNumber": {
                "description": "Specifies the document number used in the transaction.",
                "type": "string"
              },
              "documentType": {
                "type": "string",
                "enum": [
                  "sell",
                  "return"
                ]
              },
              "linkedDocumentNumber": {
                "description": "Field is used with \u201cdocumentType\u201d: \u201creturn\u201d",
                "type": "string"
              },
              "purchasedAt": {
                "type": "string",
                "format": "date-time"
              },
              "purchasePlace": {
                "type": "string"
              },
              "excludedDeliverySKUs": {
                "type": "array",
                "items": {
                }
              },
              "excludedSKUs": {
                "type": "array",
                "items": {
                }
              },
              "excludedCategories": {
                "type": "array",
                "items": {
                }
              },
              "labels": {
                "type": "array",
                "items": {
                }
              }
            },
            "type": "object"
          },
          "matched": {
            "type": "boolean"
          },
          "currency": {
            "type": "string"
          },
          "pointsEarned": {
            "type": "integer"
          },
          "unitsDeducted": {
            "type": "integer"
          },
          "channelId": {
            "type": "string",
            "format": "uuid"
          },
          "channelName": {
            "type": "string"
          },
          "assignedToCustomerAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PutWalletTypeRequestBody": {
        "properties": {
          "walletType": {
            "required": [
              "translations",
              "unitSingularName",
              "unitPluralName",
              "unitDaysExpiryAfter"
            ],
            "properties": {
              "translations": {
                "properties": {
                  "en": {
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Wallet name",
                        "type": "string"
                      },
                      "description": {
                        "description": "Wallet description",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "unitSingularName": {
                "description": "Singular name of the unit",
                "type": "string"
              },
              "unitPluralName": {
                "description": "Plural name of the unit",
                "type": "string"
              },
              "active": {
                "description": "Indicates if the wallet type is active",
                "type": "boolean"
              },
              "unitDaysExpiryAfter": {
                "description": "Expiry time for the unit:\n\n\n * `all_time_active` - Units never expire\n * `after_x_days` - Units will expire after `unitDaysActiveCount` days\n * `at_the_end_of_the_x_th_year` - Units will expire at the end of the `unitYearsActiveCount`-th year\n * `at_the_end_of_the_month` - Units will expire at the end of the month\n * `at_the_end_of_the_chosen_date` - Units will expire at chosen day of the month\n",
                "type": "string",
                "enum": [
                  "all_time_active",
                  "after_x_days",
                  "at_the_end_of_the_month",
                  "at_the_end_of_the_x_th_year",
                  "at_the_end_of_the_chosen_date"
                ]
              },
              "unitDaysActiveCount": {
                "description": "Number of days to expire units. Required when `unitDaysExpiryAfter` is `after_x_days`",
                "type": "integer"
              },
              "unitYearsActiveCount": {
                "description": "Number of year when units will expire. `0` means this year. Required when `unitDaysExpiryAfter` is `at_the_end_of_the_x_th_year`",
                "type": "integer"
              },
              "unitDaysLocked": {
                "description": "Number of days when units will be locked. `0` means this year. Required when `allTimeNotLocked` is `false`",
                "type": "integer"
              },
              "allTimeNotLocked": {
                "description": "Indicates if units will be locked after creation. If `false` then units will be locked after creation for `unitDaysLocked` days.",
                "type": "boolean",
                "default": true
              },
              "allowNegativeBalance": {
                "description": "Indicates if negative balance is allowed",
                "type": "boolean",
                "default": false
              },
              "unitExpiryDate": {
                "description": "Expiration date for unit in format `m-d`. Required when `unitDaysExpiryAfter` is `at_the_end_of_the_chosen_date`",
                "type": "string",
                "example": "08-24"
              },
              "limits": {
                "$ref": "#/components/schemas/WalletTypeLimit"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PostWalletTypeRequestBody": {
        "properties": {
          "walletType": {
            "required": [
              "translations",
              "unitSingularName",
              "unitPluralName",
              "unitDaysExpiryAfter",
              "code"
            ],
            "properties": {
              "translations": {
                "properties": {
                  "en": {
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Wallet name",
                        "type": "string"
                      },
                      "description": {
                        "description": "Wallet description",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "unitSingularName": {
                "description": "Singular name of the unit",
                "type": "string"
              },
              "unitPluralName": {
                "description": "Plural name of the unit",
                "type": "string"
              },
              "active": {
                "description": "Indicates if the wallet type is active",
                "type": "boolean"
              },
              "unitDaysExpiryAfter": {
                "description": "Expiry time for the unit:\n\n\n * `all_time_active` - Units never expire\n * `after_x_days` - Units will expire after `unitDaysActiveCount` days\n * `at_the_end_of_the_x_th_year` - Units will expire at the end of the `unitYearsActiveCount`-th year\n * `at_the_end_of_the_month` - Units will expire at the end of the month\n * `at_the_end_of_the_chosen_date` - Units will expire at chosen day of the month\n",
                "type": "string",
                "enum": [
                  "all_time_active",
                  "after_x_days",
                  "at_the_end_of_the_month",
                  "at_the_end_of_the_x_th_year",
                  "at_the_end_of_the_chosen_date"
                ]
              },
              "unitDaysActiveCount": {
                "description": "Number of days to expire units. Required when `unitDaysExpiryAfter` is `after_x_days`",
                "type": "integer"
              },
              "unitYearsActiveCount": {
                "description": "Number of year when units will expire. `0` means this year. Required when `unitDaysExpiryAfter` is `at_the_end_of_the_x_th_year`",
                "type": "integer"
              },
              "unitDaysLocked": {
                "description": "Number of days when units will be locked. `0` means this year. Required when `allTimeNotLocked` is `false`",
                "type": "integer"
              },
              "allTimeNotLocked": {
                "description": "Indicates if units will be locked after creation. If `false` then units will be locked after creation for `unitDaysLocked` days.",
                "type": "boolean",
                "default": true
              },
              "allowNegativeBalance": {
                "description": "Indicates if negative balance is allowed",
                "type": "boolean",
                "default": false
              },
              "unitExpiryDate": {
                "description": "Expiration date for unit in format `m-d`. Required when `unitDaysExpiryAfter` is `at_the_end_of_the_chosen_date`",
                "type": "string",
                "example": "08-24"
              },
              "limits": {
                "$ref": "#/components/schemas/WalletTypeLimit"
              },
              "code": {
                "description": "Unique wallet type code",
                "type": "string",
                "example": "my_wallet"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "WalletType": {
        "required": [
          "name",
          "walletTypeId",
          "code",
          "unitSingularName",
          "unitPluralName",
          "active",
          "isDefault",
          "createdAt",
          "limits"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "walletTypeId": {
            "type": "string",
            "format": "uuid",
            "example": "3eaea517-4336-45c0-b477-f5cc1081fcdb"
          },
          "code": {
            "type": "string"
          },
          "unitSingularName": {
            "type": "string"
          },
          "unitPluralName": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "isDefault": {
            "description": "Indicates if wallet type is default. Only one default wallet type can be defined in the tenant",
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "limits": {
            "$ref": "#/components/schemas/WalletTypeLimit"
          },
          "allowNegativeBalance": {
            "type": "boolean",
            "example": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "WalletTypeDetails": {
        "required": [
          "translations",
          "walletTypeId",
          "code",
          "unitSingularName",
          "unitPluralName",
          "active",
          "isDefault",
          "createdAt",
          "limits"
        ],
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Wallet name",
                    "type": "string"
                  },
                  "description": {
                    "description": "Wallet description",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "walletTypeId": {
            "type": "string",
            "format": "uuid",
            "example": "3eaea517-4336-45c0-b477-f5cc1081fcdb"
          },
          "code": {
            "type": "string",
            "example": "string"
          },
          "unitSingularName": {
            "type": "string",
            "example": "string"
          },
          "unitPluralName": {
            "type": "string",
            "example": "string"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "isDefault": {
            "type": "boolean",
            "example": true
          },
          "unitDaysExpiryAfter": {
            "type": "string",
            "example": "string"
          },
          "unitDaysActiveCount": {
            "type": "integer",
            "example": 0
          },
          "unitYearsActiveCount": {
            "type": "integer",
            "example": 0
          },
          "unitDaysLocked": {
            "type": "integer",
            "example": 0
          },
          "allTimeNotLocked": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2019-08-24T14:15:22Z"
          },
          "unitExpiryDate": {
            "description": "Expiration date for unit in format `m-d`.",
            "type": "string",
            "example": "08-24"
          },
          "limits": {
            "$ref": "#/components/schemas/WalletTypeLimit"
          },
          "allowNegativeBalance": {
            "type": "boolean",
            "example": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "WalletTypeLimit": {
        "properties": {
          "points": {
            "description": "Global limit of units for wallet type",
            "properties": {
              "interval": {
                "properties": {
                  "type": {
                    "description": "Interval of time",
                    "type": "string",
                    "enum": [
                      "calendarHours",
                      "calendarDays",
                      "calendarWeeks",
                      "calendarMonths",
                      "calendarYears"
                    ]
                  },
                  "value": {
                    "description": "Number of next intervals",
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                "type": "object"
              },
              "value": {
                "description": "Limit value in units",
                "type": "number",
                "format": "float",
                "minimum": 1
              }
            },
            "type": "object"
          },
          "pointsPerMember": {
            "description": "Limit of units for wallet type and member",
            "required": [
              "value"
            ],
            "properties": {
              "interval": {
                "properties": {
                  "type": {
                    "description": "Interval of time",
                    "type": "string",
                    "enum": [
                      "calendarHours",
                      "calendarDays",
                      "calendarWeeks",
                      "calendarMonths",
                      "calendarYears"
                    ]
                  },
                  "value": {
                    "description": "Number of next intervals",
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                  }
                },
                "type": "object"
              },
              "value": {
                "description": "Limit value in units",
                "type": "number",
                "format": "float",
                "minimum": 1
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "AchievementActivity": {
        "properties": {
          "data": {
            "type": "mixed"
          },
          "operator": {
            "type": "string",
            "example": "is_greater"
          }
        },
        "type": "object"
      },
      "ActionCause": {
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "customEventId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "internalEventName": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "AdminExternal": {
        "properties": {
          "canChangePassword": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createAt": {
            "type": "string",
            "format": "date-time"
          },
          "roles": {
            "type": "array",
            "items": {
              "properties": {
                "role": {
                  "type": "string"
                },
                "stores": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "master": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "settings": {
            "properties": {
              "notificationsEnabled": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "external": {
            "type": "boolean",
            "example": true
          },
          "apiKey": {
            "type": "string"
          },
          "dtype": {
            "type": "string"
          },
          "remoteAuth": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "AdminExternalList": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "properties": {
                "canChangePassword": {
                  "type": "boolean",
                  "example": false
                },
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "username": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "createAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "role": {
                        "type": "string"
                      },
                      "stores": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "master": {
                        "type": "boolean"
                      },
                      "default": {
                        "type": "boolean"
                      },
                      "permissions": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "type": "object"
                  }
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "settings": {
                  "properties": {
                    "notificationsEnabled": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "external": {
                  "type": "boolean",
                  "example": true
                },
                "apiKey": {
                  "type": "string"
                },
                "dtype": {
                  "type": "string"
                },
                "remoteAuth": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "total": {
            "properties": {
              "all": {
                "type": "integer"
              },
              "filtered": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AdminInternal": {
        "properties": {
          "canChangePassword": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createAt": {
            "type": "string",
            "format": "date-time"
          },
          "roles": {
            "type": "array",
            "items": {
              "properties": {
                "role": {
                  "type": "string"
                },
                "stores": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "master": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "settings": {
            "properties": {
              "notificationsEnabled": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "external": {
            "type": "boolean",
            "example": false
          },
          "dtype": {
            "type": "string"
          },
          "remoteAuth": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "AdminInternalList": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "properties": {
                "canChangePassword": {
                  "type": "boolean",
                  "example": true
                },
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "username": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "createAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "role": {
                        "type": "string"
                      },
                      "stores": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "master": {
                        "type": "boolean"
                      },
                      "default": {
                        "type": "boolean"
                      },
                      "permissions": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "type": "object"
                  }
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "settings": {
                  "properties": {
                    "notificationsEnabled": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "external": {
                  "type": "boolean",
                  "example": false
                },
                "dtype": {
                  "type": "string"
                },
                "remoteAuth": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "total": {
            "properties": {
              "all": {
                "type": "integer"
              },
              "filtered": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AdminPermissions": {
        "properties": {
          "superAdmin": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "AdminWithApiKey": {
        "properties": {
          "admin": {
            "required": [
              "email",
              "roles",
              "apiKey"
            ],
            "properties": {
              "plainPassword": {
                "type": "string"
              },
              "external": {
                "type": "boolean",
                "example": false
              },
              "apiKey": {
                "type": "string"
              },
              "isActive": {
                "type": "boolean"
              },
              "notificationsEnabled": {
                "type": "boolean"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "email": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AdminWithPlainPassword": {
        "properties": {
          "admin": {
            "required": [
              "email",
              "roles",
              "plainPassword"
            ],
            "properties": {
              "plainPassword": {
                "type": "string"
              },
              "external": {
                "type": "boolean",
                "example": true
              },
              "apiKey": {
                "type": "string"
              },
              "isActive": {
                "type": "boolean"
              },
              "notificationsEnabled": {
                "type": "boolean"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "email": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Audience": {
        "description": "Audience settings for the campaign. Optional field.",
        "properties": {
          "target": {
            "type": "string",
            "enum": [
              "segment",
              "tier"
            ]
          },
          "tiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "nullable": true
      },
      "Campaign": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      },
                      "unitsExpirationDateRule": {
                        "properties": {
                          "expirationStrategy": {
                            "type": "string"
                          },
                          "expression": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "triggerStrategy": {
            "$ref": "#/components/schemas/TriggerStrategy"
          }
        },
        "type": "object"
      },
      "CampaignTranslations": {
        "description": "This field is used to save the name and description in the language of your choice",
        "required": [
          "en"
        ],
        "properties": {
          "en": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "pl": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CampaignTranslationsResponse": {
        "type": "array",
        "items": {
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "CampaignsExecutions": {
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "executions": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Channel": {
        "properties": {
          "channelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConversionCoupon": {
        "required": [
          "customerId"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "dateValid": {
            "type": "string",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "ConversionCouponIssuedReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedRewardId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "taxPriceValue": {
            "type": "number",
            "format": "float"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "redemptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "issuedCoupon": {
            "properties": {
              "code": {
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "float"
              },
              "activeFrom": {
                "type": "string",
                "format": "date-time"
              },
              "activeTo": {
                "type": "string",
                "format": "date-time"
              },
              "usedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "customerData": {
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "costInPoints": {
            "type": "number",
            "format": "float"
          },
          "token": {
            "type": "string"
          },
          "rewardType": {
            "type": "string",
            "example": "conversion_coupon"
          },
          "unitsConversion": {
            "properties": {
              "ratio": {
                "type": "number",
                "format": "float"
              },
              "rounding": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "default"
                ]
              }
            },
            "type": "object"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause"
          }
        },
        "type": "object"
      },
      "CurrentLevel": {
        "properties": {
          "levelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "translations": {
            "$ref": "#/components/schemas/ResponseTranslations"
          }
        },
        "type": "object"
      },
      "CustomerAddressFormType": {
        "properties": {
          "street": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "country": {
            "description": "The country code in ISO 3166-1 alpha-2 format. This should be a two-letter uppercase string representing a valid country code. Examples:  - `US` (United States) - `PL` (Poland)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatTimeCriteriaField": {
        "oneOf": [
          {
            "description": "Date and time value",
            "type": "string",
            "format": "date-time"
          },
          {
            "description": "Date and time value with optional comparison operators like lt (less than), gt (greater than), etc.",
            "properties": {
              "lt": {
                "description": "Less than the specified date-time",
                "type": "string",
                "format": "date-time"
              },
              "lte": {
                "description": "Less than or equal to the specified date-time",
                "type": "string",
                "format": "date-time"
              },
              "gt": {
                "description": "Greater than the specified date-time",
                "type": "string",
                "format": "date-time"
              },
              "gte": {
                "description": "Greater than or equal to the specified date-time",
                "type": "string",
                "format": "date-time"
              },
              "eq": {
                "description": "Equal to the specified date-time",
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          }
        ]
      },
      "DynamicCoupon": {
        "required": [
          "customerId",
          "quantity",
          "couponValue",
          "withoutPoints"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "quantity": {
            "type": "integer"
          },
          "couponValue": {
            "type": "number",
            "format": "float"
          },
          "dateValid": {
            "type": "string",
            "format": "date-time"
          },
          "withoutPoints": {
            "type": "boolean"
          },
          "rewardWalletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DynamicIssuedReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedRewardId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "taxPriceValue": {
            "type": "number",
            "format": "float"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "issued",
              "pending",
              "approved",
              "rejected",
              "canceled",
              "packing",
              "awaiting_shipping",
              "shipped",
              "completed",
              "returned"
            ]
          },
          "redemptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "issuedCoupon": {
            "properties": {
              "code": {
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "float"
              },
              "activeFrom": {
                "type": "string",
                "format": "date-time"
              },
              "activeTo": {
                "type": "string",
                "format": "date-time"
              },
              "usedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "customerData": {
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "costInPoints": {
            "type": "number",
            "format": "float"
          },
          "token": {
            "type": "string"
          },
          "rewardType": {
            "type": "string",
            "example": "dynamic_coupon"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause"
          }
        },
        "type": "object"
      },
      "ExpiredToken": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Expired JWT Token."
          }
        },
        "type": "object"
      },
      "InvalidToken": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Invalid JWT Token"
          }
        },
        "type": "object"
      },
      "Limit": {
        "properties": {
          "points": {
            "required": [
              "value"
            ],
            "properties": {
              "interval": {
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "days"
                  },
                  "value": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object"
          },
          "pointsPerMember": {
            "required": [
              "value"
            ],
            "properties": {
              "interval": {
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "days"
                  },
                  "value": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object"
          },
          "executionsPerMember": {
            "required": [
              "value"
            ],
            "properties": {
              "interval": {
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "days"
                  },
                  "value": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ListOfItems": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "total": {
            "description": "Total results",
            "properties": {
              "all": {
                "type": "integer"
              },
              "filtered": {
                "type": "integer"
              },
              "estimated": {
                "description": "Field estimated is used to show that the results are estimated. It might happen when there are more than 5000 results due to performance optimization.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MaterialIssuedReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedRewardId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "redemptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "customerData": {
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "costInPoints": {
            "type": "number"
          },
          "token": {
            "type": "string"
          },
          "rewardType": {
            "type": "string",
            "example": "material"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause"
          }
        },
        "type": "object"
      },
      "MaterialReward": {
        "required": [
          "customerId",
          "quantity",
          "withoutPoints"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "quantity": {
            "type": "integer"
          },
          "withoutPoints": {
            "type": "boolean"
          },
          "rewardWalletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MemberAchievement": {
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "achievementName": {
            "type": "string"
          },
          "achievementDescription": {
            "type": "string"
          },
          "limitReached": {
            "type": "boolean"
          },
          "memberProgress": {
            "$ref": "#/components/schemas/MemberAchievementProgress"
          }
        },
        "type": "object"
      },
      "MemberAchievementProgress": {
        "properties": {
          "completedCount": {
            "type": "integer"
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "achievementRuleId": {
                  "type": "string"
                },
                "periodGoal": {
                  "type": "number",
                  "format": "float"
                },
                "currentPeriodValue": {
                  "type": "number",
                  "format": "float"
                },
                "consecutivePeriods": {
                  "type": "integer"
                },
                "completedConsecutivePeriods": {
                  "type": "integer"
                },
                "periodType": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "trigger": {
                  "type": "string"
                },
                "periodValue": {
                  "type": "number",
                  "format": "float"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "MemberAchievementProgressWasChangedPayload": {
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "completedCount": {
            "type": "integer"
          },
          "progressStatuses": {
            "type": "object"
          },
          "trigger": {
            "properties": {
              "triggerId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "transaction",
                  "custom_event"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MembersStats": {
        "properties": {
          "in_1_days": {
            "type": "integer",
            "example": 2
          },
          "in_7_days": {
            "type": "integer",
            "example": 23
          },
          "in_30_days": {
            "type": "integer",
            "example": 153
          },
          "in_365_days": {
            "type": "integer",
            "example": 345
          }
        },
        "type": "object"
      },
      "MessageEvent": {
        "properties": {
          "value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "snippets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "MultiReferralCampaign": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "referral"
          },
          "trigger": {
            "type": "string"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "multiLevel": {
            "type": "number",
            "example": 2
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PointsStats": {
        "properties": {
          "totalPointsActive": {
            "type": "number",
            "format": "float",
            "example": 72544.8
          },
          "totalPointsSpent": {
            "type": "number",
            "format": "float",
            "example": 3425.25
          },
          "totalPointsAdded": {
            "type": "number",
            "format": "float",
            "example": 47563
          },
          "totalPointsExpired": {
            "type": "number",
            "format": "float",
            "example": 432.9
          },
          "totalPointsPending": {
            "type": "number",
            "format": "float",
            "example": 65764.76
          }
        },
        "type": "object"
      },
      "PostMultiReferralCampaign": {
        "required": [
          "type",
          "trigger",
          "translations",
          "activity"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "referral"
          },
          "multiLevel": {
            "type": "number",
            "example": 2
          },
          "trigger": {
            "type": "string"
          },
          "activity": {
            "required": [
              "startsAt"
            ],
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "active": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslations"
          }
        },
        "type": "object"
      },
      "PutMember": {
        "properties": {
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "not_disclosed"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "example@example.com"
          },
          "phone": {
            "type": "string"
          },
          "loyaltyCardNumber": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/CustomerAddressFormType"
          },
          "company": {
            "properties": {
              "name": {
                "type": "string"
              },
              "nip": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "agreement1": {
            "type": "boolean"
          },
          "agreement2": {
            "type": "boolean"
          },
          "agreement3": {
            "type": "boolean"
          },
          "levelId": {
            "description": "Assign member to tier",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "PutUniqueCodeCampaign": {
        "required": [
          "type",
          "trigger",
          "translations",
          "activity",
          "eventCodeAttribute",
          "codeGenerator"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "referral"
          },
          "trigger": {
            "type": "string",
            "example": "custom_event_unique_code"
          },
          "activity": {
            "required": [
              "startsAt"
            ],
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "active": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "$ref": "#/components/schemas/CampaignTranslations"
          },
          "eventCodeAttribute": {
            "type": "string",
            "example": "qrCode"
          },
          "codeGenerator": {
            "properties": {
              "characterSet": {
                "type": "string",
                "example": "alphanum"
              },
              "length": {
                "type": "integer",
                "example": 12
              },
              "prefix": {
                "type": "string",
                "example": "Code"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Referral": {
        "properties": {
          "referralId": {
            "type": "string",
            "format": "uuid"
          },
          "referrerId": {
            "type": "string",
            "format": "uuid"
          },
          "referrerName": {
            "type": "string"
          },
          "referrerToken": {
            "type": "string"
          },
          "refereeId": {
            "type": "string",
            "format": "uuid"
          },
          "refereeName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RelatedAchievement": {
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "achievementName": {
            "type": "string"
          },
          "limitReached": {
            "description": "This property indicates whether the limit for achievement is reached by member",
            "type": "boolean"
          },
          "memberProgress": {
            "$ref": "#/components/schemas/MemberAchievementProgress"
          },
          "lastTrigger": {
            "description": "Last trigger which triggered related achievement",
            "properties": {
              "triggerId": {
                "type": "string",
                "format": "uuid"
              },
              "triggerType": {
                "type": "string",
                "enum": [
                  "transaction",
                  "custom_event"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ResponseTranslations": {
        "properties": {
          "en": {
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "pl": {
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Reward": {
        "properties": {
          "reward": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "levels": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "brandIcon": {
            "type": "boolean"
          },
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "type": "string",
            "enum": [
              "level",
              "segment"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "costInPoints": {
            "type": "number"
          },
          "activity": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "visibility": {
            "properties": {
              "allTime": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "tax": {
            "type": "number"
          },
          "taxPriceValue": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "properties": {
              "general": {
                "type": "number"
              },
              "perUser": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "fulfillmentTracking": {
            "type": "boolean",
            "deprecated": true
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "couponGenerator": {
            "properties": {
              "length": {
                "type": "number"
              },
              "characterSet": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "couponValue": {
            "type": "number"
          },
          "segmentNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "levelNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "categoryNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "usageLeft": {
            "type": "number"
          },
          "usageLeftForCustomer": {
            "type": "number"
          },
          "canBeBoughtByCustomer": {
            "type": "boolean"
          },
          "unitsConversion": {
            "properties": {
              "ratio": {
                "type": "number",
                "format": "float"
              },
              "rounding": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "default"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Role": {
        "properties": {
          "role": {
            "type": "string"
          },
          "stores": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "example": 0
          },
          "name": {
            "type": "string"
          },
          "master": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "resource": {
                  "type": "string"
                },
                "access": {
                  "type": "string"
                },
                "filterQuery": {
                  "type": "string"
                },
                "role": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "SearchableTotalResponse": {
        "required": [
          "all",
          "filtered",
          "estimated"
        ],
        "properties": {
          "all": {
            "type": "integer"
          },
          "filtered": {
            "type": "integer"
          },
          "estimated": {
            "description": "Field estimated is used to show that the results are estimated. It might happen when there are more than 5000 results due to performance optimization.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SimulateResult": {
        "properties": {
          "effects": {
            "type": "array",
            "items": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "give_points",
                    "deduct_unit"
                  ]
                },
                "campaign": {
                  "$ref": "#/components/schemas/Campaign"
                },
                "points": {
                  "type": "number",
                  "format": "float"
                },
                "wallet": {
                  "type": "string"
                },
                "expression": {
                  "type": "string"
                },
                "target": {
                  "type": "string",
                  "enum": [
                    "self",
                    "referrer"
                  ]
                }
              },
              "type": "object"
            }
          },
          "evaluationWarnings": {
            "type": "array",
            "items": {
              "properties": {
                "campaignId": {
                  "type": "string",
                  "format": "uuid"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "simulatedMember": {
            "properties": {
              "memberId": {
                "type": "string",
                "format": "uuid"
              },
              "wallets": {
                "type": "array",
                "items": {
                  "properties": {
                    "walletId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    },
                    "walletType": {
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "isDefault": {
                          "type": "boolean"
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "unitSingularName": {
                          "type": "string"
                        },
                        "unitPluralName": {
                          "type": "string"
                        },
                        "rewardSpending": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "account": {
                      "properties": {
                        "activeUnits": {
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "StaticCoupon": {
        "required": [
          "customerId",
          "quantity",
          "withoutPoints"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "quantity": {
            "type": "integer"
          },
          "couponValue": {
            "type": "number",
            "format": "float"
          },
          "dateValid": {
            "type": "string",
            "format": "date-time"
          },
          "withoutPoints": {
            "type": "boolean"
          },
          "rewardWalletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StaticIssuedReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedRewardId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "taxPriceValue": {
            "type": "number",
            "format": "float"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "redemptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "issuedCoupon": {
            "properties": {
              "code": {
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "float"
              },
              "activeFrom": {
                "type": "string",
                "format": "date-time"
              },
              "activeTo": {
                "type": "string",
                "format": "date-time"
              },
              "usedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "customerData": {
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "costInPoints": {
            "type": "number",
            "format": "float"
          },
          "token": {
            "type": "string"
          },
          "rewardType": {
            "type": "string",
            "example": "static_coupon"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause"
          }
        },
        "type": "object"
      },
      "Tier": {
        "properties": {
          "levelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hasPhoto": {
            "type": "boolean"
          },
          "storeCode": {
            "type": "string"
          },
          "conditionValue": {
            "type": "number",
            "format": "float",
            "deprecated": true
          }
        },
        "type": "object"
      },
      "TierSetDowngrade": {
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "none",
              "automatic",
              "periodic"
            ]
          },
          "period": {
            "type": "string",
            "enum": [
              "registration_anniversary",
              "yearly",
              "monthly",
              "weekly"
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "TierStats": {
        "properties": {
          "levelId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Tier1"
          },
          "conditionValue": {
            "type": "number",
            "format": "float",
            "example": 3.8
          },
          "store": {
            "type": "string",
            "example": "DEFAULT"
          },
          "customers": {
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "TotalLogsArchived": {
        "properties": {
          "totalArchived": {
            "type": "integer",
            "example": 32
          },
          "filename": {
            "type": "string",
            "example": "filename"
          }
        },
        "type": "object"
      },
      "TransactionsStats": {
        "properties": {
          "countIntervals": {
            "properties": {
              "in_1_days": {
                "type": "integer",
                "example": 2
              },
              "in_7_days": {
                "type": "integer",
                "example": 23
              },
              "in_30_days": {
                "type": "integer",
                "example": 153
              },
              "in_365_days": {
                "type": "integer",
                "example": 345
              }
            },
            "type": "object"
          },
          "total": {
            "type": "integer",
            "example": 531
          },
          "amount": {
            "description": "transactions total amount",
            "type": "number",
            "format": "float",
            "example": 453.7
          },
          "amountWithoutDeliveryCosts": {
            "description": "transactions total amount without delivery costs",
            "type": "number",
            "format": "float",
            "example": 389.5
          },
          "currency": {
            "type": "string",
            "example": "USD"
          }
        },
        "type": "object"
      },
      "Translations": {
        "description": "This field is used to save the name and description in the language of your choice.\nYou need to add at least one name in the default language.\n",
        "required": [
          "en"
        ],
        "properties": {
          "en": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "pl": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "TriggerStrategy": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "birthday",
              "registration_anniversary",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "executionSchedule": {
            "description": "Required for `weekly` and `monthly` type of campaign.",
            "properties": {
              "dayOfWeek": {
                "description": "List of days when campaign should be executed. 0 for Sunday, 6 for Saturday.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                  ]
                },
                "nullable": true
              },
              "dayOfMonth": {
                "description": "List of month days when campaign should be executed. 'L' for the last day of the month.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31
                      ]
                    },
                    {
                      "type": "string",
                      "enum": [
                        "L"
                      ]
                    }
                  ]
                },
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Unauthorized": {
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Authentication Required"
          }
        },
        "type": "object"
      },
      "UniqueCodeCampaign": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "referral"
          },
          "trigger": {
            "type": "string",
            "example": "custom_event_unique_code"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "activity": {
            "properties": {
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayOrder": {
            "type": "number",
            "example": 1
          },
          "rules": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "effects": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "pointsRule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "eventCodeAttribute": {
            "type": "string",
            "example": "qrCode"
          },
          "codeGenerator": {
            "properties": {
              "characterSet": {
                "type": "string",
                "example": "alphanum"
              },
              "length": {
                "type": "integer",
                "example": 12
              },
              "prefix": {
                "type": "string",
                "example": "Code"
              }
            },
            "type": "object"
          },
          "limitUsages": {
            "properties": {
              "points": {
                "properties": {
                  "currentValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "limitValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "remaining": {
                    "type": "number",
                    "format": "float"
                  },
                  "interval": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "calendarHours",
                          "calendarDays",
                          "calendarWeeks",
                          "calendarMonths",
                          "calendarYears"
                        ]
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Visibility": {
        "description": "Visibility settings for the campaign. Optional field.",
        "properties": {
          "target": {
            "type": "string",
            "enum": [
              "segment",
              "tier",
              "none"
            ]
          },
          "tiers": {
            "description": "Visibility settings for the campaign. Optional field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "segments": {
            "description": "Visibility settings for the campaign. Optional field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "WebhookAchievement": {
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "limit": {
            "properties": {
              "value": {
                "type": "integer"
              },
              "interval": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "calendarHours",
                      "calendarDays",
                      "calendarWeeks",
                      "calendarMonths",
                      "calendarYears"
                    ]
                  },
                  "value": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "translations": {
            "$ref": "#/components/schemas/Translations"
          },
          "rules": {
            "type": "array",
            "items": {
              "required": [
                "trigger",
                "type",
                "completeRule",
                "conditions",
                "aggregation",
                "limit",
                "translations"
              ],
              "properties": {
                "trigger": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "completeRule": {
                  "properties": {
                    "periodGoal": {
                      "type": "integer"
                    },
                    "period": {
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "consecutive": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "operator": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "attribute": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "aggregation": {
                  "properties": {
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "limit": {
                  "properties": {
                    "value": {
                      "type": "integer"
                    },
                    "interval": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "calendarHours",
                            "calendarDays",
                            "calendarWeeks",
                            "calendarMonths",
                            "calendarYears"
                          ]
                        },
                        "value": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "translations": {
                  "$ref": "#/components/schemas/Translations"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "WebhookCampaign": {
        "properties": {
          "campaignId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "triggerType": {
            "type": "string",
            "enum": [
              "transaction",
              "custom_event",
              "internal_event",
              "time",
              "achievement"
            ]
          },
          "trigger": {
            "description": "Available only for transaction, custom_event and achievement triggerType.",
            "properties": {
              "triggerId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "transaction",
                  "custom_event",
                  "internal_event",
                  "time",
                  "achievement"
                ]
              },
              "payload": {
                "type": "object",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MemberAchievementProgressWasChangedPayload"
                  }
                ]
              }
            },
            "type": "object"
          },
          "relatedAchievement": {
            "$ref": "#/components/schemas/RelatedAchievement"
          }
        },
        "type": "object"
      },
      "WebhookCampaignEffect": {
        "properties": {
          "status": {
            "type": "string"
          },
          "target": {
            "description": "Member who is the target of the campaign (he got the effects of the campaign)",
            "type": "string"
          },
          "walletTypeCode": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "points": {
            "type": "number",
            "format": "float"
          },
          "couponValue": {
            "type": "number",
            "format": "float"
          },
          "rewardId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookCustomer": {
        "description": "Member whose action triggered the campaign",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "loyaltyCardNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "fulfillmentTracking": {
            "type": "boolean"
          },
          "canBeBoughtManually": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "levels": {
            "description": "Selects specific tiers of the member",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "locale": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "activity": {
            "description": "Activity period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "visibility": {
            "description": "Visibility period",
            "required": [
              "allTime"
            ],
            "properties": {
              "allTime": {
                "description": "Marked as unlimited period",
                "type": "boolean"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "labels": {
            "description": "Labels",
            "type": "array",
            "items": {
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "featured": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "costInPoints": {
            "description": "Cost of reward in units",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 60.8,
            "nullable": true
          },
          "usageLimit": {
            "required": [
              "perUser"
            ],
            "properties": {
              "perUser": {
                "description": "Usages limit per member (-1 means unlimited)",
                "type": "number",
                "format": "int32",
                "minimum": -1
              },
              "general": {
                "description": "Global usages limit (-1 means unlimited). Required only when couponGenerator is defined.",
                "type": "number",
                "format": "int32",
                "minimum": -1
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        },
        "type": "object"
      },
      "issuedReward": {
        "properties": {
          "rewardId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedRewardId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "tax": {
            "type": "number"
          },
          "taxPriceValue": {
            "type": "number"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "redemptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "issuedCoupon": {
            "properties": {
              "code": {
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "float"
              },
              "activeFrom": {
                "type": "string",
                "format": "date-time"
              },
              "activeTo": {
                "type": "string",
                "format": "date-time"
              },
              "valueType": {
                "type": "string",
                "enum": [
                  "money",
                  "percentage"
                ]
              },
              "usedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "customerData": {
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "loyaltyCardNumber": {
                "type": "string"
              },
              "address": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "costInPoints": {
            "type": "number",
            "format": "float"
          },
          "token": {
            "type": "string"
          },
          "rewardType": {
            "type": "string",
            "enum": [
              "static_coupon",
              "material",
              "dynamic_coupon",
              "conversion_coupon"
            ]
          },
          "unitsConversion": {
            "properties": {
              "ratio": {
                "type": "number",
                "format": "float"
              },
              "rounding": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "default"
                ]
              }
            },
            "type": "object"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause"
          }
        },
        "type": "object"
      },
      "RoleFormType": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionFormType"
            }
          },
          "stores": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "DEFAULT"
            }
          }
        },
        "type": "object"
      },
      "AclAvailableObject": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchableTotalResponse2": {
        "properties": {
          "all": {
            "type": "integer"
          },
          "filtered": {
            "type": "integer"
          },
          "estimated": {
            "description": "Field estimated is used to show that the results are estimated. It might happen when there are more than 5000 results due to performance optimization.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AdminId": {
        "properties": {
          "adminId": {
            "description": "Created administrator ID",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "type": "object"
      },
      "UserSettingsEntry": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "UserSettingsEntryFormType": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PasswordResetFormType": {
        "required": [
          "plainPassword"
        ],
        "properties": {
          "plainPassword": {
            "type": "string",
            "format": "password"
          }
        },
        "type": "object"
      },
      "AuditLog": {
        "properties": {
          "auditLogId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "eventType": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ArchiveFormType": {
        "required": [
          "beforeDate"
        ],
        "properties": {
          "beforeDate": {
            "type": "string",
            "format": "date"
          }
        },
        "type": "object"
      },
      "Channel2": {
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditChannelFormType": {
        "required": [
          "name",
          "identifier"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateChannelFormType": {
        "required": [
          "name",
          "identifier"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditCustomAttributeFormType": {
        "required": [
          "customAttributes"
        ],
        "properties": {
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          }
        },
        "type": "object"
      },
      "DeleteCustomAttributeFormType": {
        "required": [
          "customAttributes"
        ],
        "properties": {
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          }
        },
        "type": "object"
      },
      "CustomEventSchema": {
        "properties": {
          "eventType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "SchemaFormType": {
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldSchemaFormType"
            }
          }
        },
        "type": "object"
      },
      "GeneralOverview": {
        "properties": {
          "intervalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "intervalEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "header": {
            "$ref": "#/components/schemas/GeneralOverviewHeader"
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "comparativePeriodData": {
            "type": "object",
            "deprecated": true,
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "UnitsOverview": {
        "properties": {
          "intervalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "intervalEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "walletTypeCode": {
            "type": "string"
          },
          "header": {
            "$ref": "#/components/schemas/UnitsOverviewHeader"
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "Language": {
        "properties": {
          "localeCode": {
            "$ref": "#/components/schemas/LocaleCode"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "adminDefault": {
            "type": "boolean"
          },
          "apiDefault": {
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranslationEntry"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LanguageDataFormType": {
        "required": [
          "name",
          "apiDefault",
          "adminDefault",
          "order"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "apiDefault": {
            "type": "boolean"
          },
          "adminDefault": {
            "type": "boolean"
          },
          "order": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LanguageData": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "adminDefault": {
            "type": "boolean"
          },
          "apiDefault": {
            "type": "boolean"
          },
          "order": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "CreateLanguageFormType": {
        "required": [
          "name",
          "code",
          "apiDefault",
          "adminDefault",
          "order"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "apiDefault": {
            "type": "boolean"
          },
          "adminDefault": {
            "type": "boolean"
          },
          "order": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TranslationEntryDataFormType": {
        "required": [
          "value"
        ],
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranslationEntry": {
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RedeemCouponFormType": {
        "required": [
          "couponCode"
        ],
        "properties": {
          "couponCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CouponUsageResponse": {
        "properties": {
          "code": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "ReissueCouponFormType": {
        "required": [
          "couponCode"
        ],
        "properties": {
          "couponCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AvatarFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "Customer": {
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          },
          "channelId": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastLevelRecalculation": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "loyaltyCardNumber": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "agreement1": {
            "type": "boolean"
          },
          "agreement2": {
            "type": "boolean"
          },
          "agreement3": {
            "type": "boolean"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "transactionsCount": {
            "type": "integer"
          },
          "returnTransactionsCount": {
            "type": "integer"
          },
          "transactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "returnTransactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "transactionsAmountWithoutDeliveryCosts": {
            "type": "number",
            "format": "float"
          },
          "amountExcludedForLevel": {
            "type": "number",
            "format": "float"
          },
          "averageTransactionAmount": {
            "type": "number",
            "format": "float"
          },
          "averageReturnTransactionAmount": {
            "type": "number",
            "format": "float"
          },
          "lastTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelAchievementDate": {
            "type": "string",
            "format": "date-time"
          },
          "anonymized": {
            "type": "boolean"
          },
          "referralToken": {
            "type": "string"
          },
          "defaultAccount": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "type": "object"
      },
      "CustomerRegistrationFormType": {
        "required": [
          "email",
          "agreement1"
        ],
        "properties": {
          "referrerToken": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "not_disclosed"
            ]
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "loyaltyCardNumber": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "createdAt": {
            "description": "Use \"registeredAt\" field instead.",
            "type": "string",
            "format": "date-time",
            "deprecated": true
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/FormType"
          },
          "company": {
            "$ref": "#/components/schemas/FormType"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          },
          "agreement1": {
            "description": "TOS Agreement (required to be true)",
            "type": "boolean"
          },
          "agreement2": {
            "description": "Direct Marketing Agreement",
            "type": "boolean"
          },
          "agreement3": {
            "description": "Optional Agreement",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomerAddressFormType2": {
        "properties": {
          "street": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerStatus": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "activePoints": {
            "type": "number",
            "format": "float"
          },
          "transferredPoints": {
            "type": "number",
            "format": "float"
          },
          "earnedPoints": {
            "type": "number",
            "format": "float"
          },
          "spentPoints": {
            "type": "number",
            "format": "float"
          },
          "expiredPoints": {
            "type": "number",
            "format": "float"
          },
          "lockedPoints": {
            "type": "number",
            "format": "float"
          },
          "blockedPoints": {
            "type": "number",
            "format": "float"
          },
          "levelName": {
            "type": "string"
          },
          "levelConditionValue": {
            "type": "number",
            "format": "float"
          },
          "nextLevelName": {
            "description": "This property only shows correct data for tier sets with one condition.",
            "type": "string",
            "deprecated": true
          },
          "nextLevelConditionValue": {
            "description": "This property only shows correct data for tier sets with one condition.",
            "type": "number",
            "format": "float",
            "deprecated": true
          },
          "transactionsAmountToNextLevelWithoutDeliveryCosts": {
            "type": "number",
            "format": "float"
          },
          "transactionsAmountWithoutDeliveryCosts": {
            "type": "number",
            "format": "float"
          },
          "transactionsAmountToNextLevel": {
            "type": "number",
            "format": "float"
          },
          "averageTransactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "averageReturnTransactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "transactionsCount": {
            "type": "integer"
          },
          "returnTransactionsCount": {
            "type": "integer"
          },
          "transactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "returnTransactionsAmount": {
            "type": "number",
            "format": "float"
          },
          "pointsToNextLevel": {
            "description": "This property only shows correct data for tier sets with one condition.",
            "type": "number",
            "format": "float",
            "deprecated": true
          },
          "currency": {
            "type": "string"
          },
          "levelWillExpireInDays": {
            "type": "integer"
          },
          "pointsSinceLastLevelRecalculation": {
            "type": "number",
            "format": "float"
          },
          "pointsRequiredToRetainLevel": {
            "type": "number",
            "format": "float"
          },
          "tierSet": {
            "$ref": "#/components/schemas/TierSet"
          },
          "pointsExpiringNextMonth": {
            "type": "number",
            "format": "float"
          },
          "pointsExpiringBreakdown": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          },
          "storeCode": {
            "type": "string"
          },
          "firstTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelAchievementDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "referralToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImportFileFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "ImportResult": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportResultItem"
            }
          },
          "totalProcessed": {
            "type": "integer"
          },
          "totalSuccess": {
            "type": "integer"
          },
          "totalFailed": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CustomerSelfRegistrationFormType": {
        "required": [
          "email",
          "agreement1",
          "plainPassword"
        ],
        "properties": {
          "referrerToken": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "not_disclosed"
            ]
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "loyaltyCardNumber": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "createdAt": {
            "description": "Use \"registeredAt\" field instead.",
            "type": "string",
            "format": "date-time",
            "deprecated": true
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/FormType"
          },
          "company": {
            "$ref": "#/components/schemas/FormType"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          },
          "agreement1": {
            "description": "TOS Agreement (required to be true)",
            "type": "boolean"
          },
          "agreement2": {
            "description": "Direct Marketing Agreement",
            "type": "boolean"
          },
          "agreement3": {
            "description": "Optional Agreement",
            "type": "boolean"
          },
          "plainPassword": {
            "type": "string",
            "format": "password"
          }
        },
        "type": "object"
      },
      "ChangePasswordFormType": {
        "required": [
          "currentPassword",
          "plainPassword"
        ],
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password"
          },
          "plainPassword": {
            "type": "string",
            "format": "password"
          }
        },
        "type": "object"
      },
      "Transfer": {
        "properties": {
          "transferId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "storeId": {
            "type": "string",
            "format": "uuid"
          },
          "comment": {
            "type": "string"
          },
          "cancelled": {
            "type": "boolean"
          },
          "pending": {
            "type": "boolean"
          },
          "unlockedAt": {
            "type": "string",
            "format": "date-time"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause2"
          },
          "value": {
            "type": "number",
            "format": "float"
          },
          "externalTransferId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "TransferPointsByCustomerFormType": {
        "required": [
          "receiver",
          "points"
        ],
        "properties": {
          "receiver": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "points": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "TransferPointsFormType": {
        "required": [
          "receiver",
          "points",
          "sender"
        ],
        "properties": {
          "receiver": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "points": {
            "type": "number"
          },
          "sender": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          }
        },
        "type": "object"
      },
      "Transfer2": {
        "properties": {
          "transferId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "storeId": {
            "type": "string",
            "format": "uuid"
          },
          "comment": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "cancelled": {
            "type": "boolean"
          },
          "pending": {
            "type": "boolean"
          },
          "actionCause": {
            "$ref": "#/components/schemas/ActionCause2"
          },
          "unlockedAt": {
            "type": "string",
            "format": "date-time"
          },
          "cancelledAt": {
            "type": "string",
            "format": "date-time"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "registeredOn": {
            "type": "string",
            "format": "date-time"
          },
          "externalTransferId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddPointsFormType": {
        "required": [
          "customer",
          "points",
          "externalTransferId"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "points": {
            "type": "number"
          },
          "expiresInDays": {
            "type": "number"
          },
          "lockedUntilDays": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "externalTransferId": {
            "type": "string"
          },
          "walletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BlockPointsFormType": {
        "required": [
          "customer",
          "points",
          "externalTransferId"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "points": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "externalTransferId": {
            "type": "string"
          },
          "walletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpendPointsFormType": {
        "required": [
          "customer",
          "points",
          "externalTransferId"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "points": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "externalTransferId": {
            "type": "string"
          },
          "walletCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RewardBrandIconFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "Coupon": {
        "properties": {
          "code": {
            "type": "string"
          },
          "issued": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IssuedRewardStatusChange": {
        "properties": {
          "status": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RewardPhotoFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "RewardCategory": {
        "properties": {
          "name": {
            "type": "string"
          },
          "rewardCategoryId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardCategoryTranslation"
            }
          }
        },
        "type": "object"
      },
      "EditRewardCategoryFormType": {
        "required": [
          "sortOrder",
          "translations"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer"
          },
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          }
        },
        "type": "object"
      },
      "RewardCategoryFormType": {
        "required": [
          "sortOrder",
          "translations"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer"
          },
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          }
        },
        "type": "object"
      },
      "SetPasswordFormType": {
        "required": [
          "plainPassword"
        ],
        "properties": {
          "plainPassword": {
            "type": "string",
            "format": "password"
          }
        },
        "type": "object"
      },
      "EditSegmentFormType": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentPartFormType"
            }
          }
        },
        "type": "object"
      },
      "Segment": {
        "properties": {
          "segmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "customersCount": {
            "type": "integer"
          },
          "calculatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "averageTransactionAmount": {
            "type": "string"
          },
          "averageTransactions": {
            "type": "string"
          },
          "averageClv": {
            "type": "string"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentPart"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "CreateSegmentFormType": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentPartFormType"
            }
          }
        },
        "type": "object"
      },
      "SegmentCustomer": {
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "calculatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "LogoFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "LevelFormType": {
        "required": [
          "translations",
          "conditionValue",
          "rewards"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "active": {
            "type": "boolean"
          },
          "conditionValue": {
            "type": "number"
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardFormType"
            }
          }
        },
        "type": "object"
      },
      "LevelPhotoFormType": {
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "AddLabelsFormType": {
        "required": [
          "labels"
        ],
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          }
        },
        "type": "object"
      },
      "RemoveLabelsFormType": {
        "required": [
          "labels"
        ],
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLabelFormType"
            }
          }
        },
        "type": "object"
      },
      "ManuallyAssignCustomerToTransactionFormType": {
        "required": [
          "transactionDocumentNumber"
        ],
        "properties": {
          "transactionDocumentNumber": {
            "type": "string"
          },
          "customerId": {
            "type": "string",
            "example": "7239e6f7-e52e-466b-8c24-699709b64076"
          },
          "customerLoyaltyCardNumber": {
            "type": "string"
          },
          "customerPhoneNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomersIdentificationPriority": {
        "required": [
          "priority",
          "field"
        ],
        "properties": {
          "priority": {
            "type": "number"
          },
          "field": {
            "type": "string",
            "enum": [
              "phone",
              "loyaltyCardNumber",
              "email"
            ]
          }
        },
        "type": "object"
      },
      "CustomersIdentificationPriority2": {
      },
      "AchievementBasicData": {
        "properties": {
          "achievementId": {
            "description": "Achievement Identity",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "CreateAchievementFormType": {
        "required": [
          "translations",
          "activity",
          "rules"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityFormType"
          },
          "active": {
            "type": "boolean"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFormType"
            }
          },
          "limit": {
            "$ref": "#/components/schemas/LimitFormType"
          }
        },
        "type": "object"
      },
      "PeriodTypeFormType": {
        "type": "object"
      },
      "ConditionType": {
        "required": [
          "attribute",
          "operator"
        ],
        "properties": {
          "attribute": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "expression",
              "is_equal",
              "has_at_least_one_label",
              "contains",
              "not_contains",
              "is_not_equal",
              "is_not_one_of",
              "is_one_of",
              "matches_regex",
              "is_greater",
              "is_greater_or_equal",
              "is_less",
              "is_less_or_equal",
              "ends_with",
              "starts_with",
              "is_after",
              "is_before",
              "is_between",
              "is_day_of_week",
              "is_month_of_year",
              "is_not_between",
              "is_day_of_month",
              "is_time_between",
              "is_number_between"
            ]
          }
        },
        "type": "object"
      },
      "WebhookSubscription": {
        "properties": {
          "webhookSubscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "eventName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headerName": {
            "type": "string",
            "deprecated": true
          },
          "headerValue": {
            "type": "string",
            "deprecated": true
          },
          "legacy": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "CreateWebhookSubscriptionFormType": {
        "required": [
          "eventName",
          "url"
        ],
        "properties": {
          "eventName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headerName": {
            "description": "Use \"headers\" field instead.",
            "type": "string",
            "deprecated": true
          },
          "headerValue": {
            "description": "Use \"headers\" field instead.",
            "type": "string",
            "deprecated": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeaderFormType"
            }
          }
        },
        "type": "object"
      },
      "Wallet": {
        "properties": {
          "walletType": {
            "$ref": "#/components/schemas/WalletTypeBasicData"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/Account2"
          },
          "unitsLimitUsed": {
            "type": "number",
            "format": "float"
          },
          "unitsLimitRemaining": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "GroupOfValuesResponse": {
        "properties": {
          "groupOfValuesId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "recordsInGroup": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "GroupOfValuesFormType": {
        "required": [
          "translations"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "active": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupOfValuesId": {
        "properties": {
          "groupOfValuesId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SingleView": {
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "intervalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "intervalEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "header": {
            "$ref": "#/components/schemas/SingleViewHeader"
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "comparativePeriodData": {
            "type": "object",
            "deprecated": true,
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "Export": {
        "properties": {
          "exportId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "campaignCode",
              "member",
              "memberTier",
              "memberSegment",
              "rewardFulfillment"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "done",
              "failed",
              "error"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "criteria": {
            "type": "string"
          },
          "exportedRows": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportBasicData": {
        "properties": {
          "exportId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "campaignCode",
              "member",
              "memberTier",
              "memberSegment",
              "rewardFulfillment"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "done",
              "failed",
              "error"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "criteria": {
            "type": "string"
          },
          "exportedRows": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateGroupOfValuesFormType": {
        "required": [
          "translations"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "active": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Value": {
        "properties": {
          "valueId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "groupOfValuesId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "WebhookSubscriptionDetails": {
        "properties": {
          "webhookSubscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "eventName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headerName": {
            "description": "Use 'headers' field instead.",
            "type": "string",
            "deprecated": true
          },
          "headerValue": {
            "description": "Use 'headers' field instead.",
            "type": "string",
            "deprecated": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeader"
            }
          },
          "legacy": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "UpdateWebhookSubscriptionFormType": {
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          },
          "headerName": {
            "description": "Use \"headers\" field instead.",
            "type": "string",
            "deprecated": true
          },
          "headerValue": {
            "description": "Use \"headers\" field instead.",
            "type": "string",
            "deprecated": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeaderFormType"
            }
          }
        },
        "type": "object"
      },
      "Achievement": {
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit2"
          },
          "activity": {
            "$ref": "#/components/schemas/AchievementActivity"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule2"
            }
          }
        },
        "type": "object"
      },
      "UpdateAchievementFormType": {
        "required": [
          "translations",
          "activity",
          "rules",
          "limit"
        ],
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityFormType"
          },
          "active": {
            "type": "boolean"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleFormType"
            }
          },
          "limit": {
            "$ref": "#/components/schemas/LimitFormType"
          }
        },
        "type": "object"
      },
      "PatchAchievementFormType": {
        "properties": {
          "translations": {
            "$ref": "#/components/schemas/TranslationsType"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityFormType"
          },
          "active": {
            "type": "boolean"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchRuleFormType"
            }
          },
          "limit": {
            "$ref": "#/components/schemas/LimitFormType"
          }
        },
        "type": "object"
      },
      "CampaignCode": {
        "properties": {
          "codeId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "usedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisibleCampaign": {
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            }
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateMemberAchievementProgressFormType": {
        "properties": {
          "completedCount": {
            "type": "integer"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgressRuleFormType"
            }
          }
        },
        "type": "object"
      },
      "StoreFormType": {
        "required": [
          "name",
          "active"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateWebhookSubscriptionLegacyModeFormType": {
        "required": [
          "legacy"
        ],
        "properties": {
          "legacy": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PermissionFormType": {
        "required": [
          "resource",
          "access"
        ],
        "properties": {
          "resource": {
            "type": "string",
            "enum": [
              "LEVEL",
              "TRANSACTION",
              "ADMIN",
              "ACL",
              "ANALYTICS",
              "CHANNEL",
              "POINT_TRANSFER",
              "SEGMENT",
              "SETTINGS",
              "TECH_SETTINGS",
              "CUSTOMER",
              "REWARDS",
              "AUDIT",
              "EVENT",
              "LANGUAGE",
              "TRANSLATIONS",
              "STORES",
              "CAMPAIGN",
              "REWARDS_CATEGORIES",
              "ISSUED_REWARDS",
              "CUSTOM_EVENT",
              "WALLET",
              "WEBHOOK_SUBSCRIPTION",
              "DATA_ANALYTICS",
              "DATA_ANALYTICS_CAMPAIGN",
              "IMPORT",
              "EXPORT",
              "GROUP_OF_VALUES",
              "BILLABLE_REPORTS"
            ]
          },
          "access": {
            "type": "string",
            "enum": [
              "VIEW",
              "MODIFY"
            ]
          },
          "filterQuery": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Store": {
        "properties": {
          "storeId": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Schema": {
        "properties": {
        },
        "type": "object"
      },
      "FieldSchemaFormType": {
        "required": [
          "type",
          "description",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "number",
              "datetime",
              "boolean",
              "object",
              "collection"
            ]
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeneralOverviewHeader": {
        "properties": {
          "registeredMembers": {
            "type": "integer"
          },
          "activeMembers": {
            "type": "integer"
          },
          "revenue": {
            "type": "number",
            "format": "float"
          },
          "avgSpending": {
            "type": "number",
            "format": "float"
          },
          "transactions": {
            "type": "integer"
          },
          "avgTransactionValue": {
            "type": "number",
            "format": "float"
          },
          "avgNumberOfTransactions": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "UnitsOverviewHeader": {
        "properties": {
          "unitsIssued": {
            "type": "number",
            "format": "float"
          },
          "unitsSpent": {
            "type": "number",
            "format": "float"
          },
          "unitsExpired": {
            "type": "number",
            "format": "float"
          },
          "unitsPending": {
            "type": "number",
            "format": "float"
          },
          "unitsActive": {
            "type": "number",
            "format": "float"
          },
          "redemptionRate": {
            "type": "number",
            "format": "float"
          },
          "breakageRate": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "LocaleCode": {
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "street": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Company": {
        "properties": {
          "name": {
            "type": "string"
          },
          "nip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Account": {
        "properties": {
          "accountId": {
            "type": "string"
          },
          "activePoints": {
            "type": "number",
            "format": "float"
          },
          "transferredPoints": {
            "type": "number",
            "format": "float"
          },
          "lockedPoints": {
            "type": "number",
            "format": "float"
          },
          "expiredPoints": {
            "type": "number",
            "format": "float"
          },
          "spentPoints": {
            "type": "number",
            "format": "float"
          },
          "earnedPoints": {
            "type": "number",
            "format": "float"
          },
          "blockedPoints": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "FormType": {
        "type": "object"
      },
      "TierSet": {
        "properties": {
          "tierSetId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isMigrated": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ImportResultItem": {
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "processImportResult": {
            "$ref": "#/components/schemas/ProcessImportResult"
          },
          "identifier": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionCause2": {
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "customEventId": {
            "type": "string",
            "format": "uuid"
          },
          "internalEventName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Member": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "loyaltyCardNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RewardCategoryTranslation": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "translatable": {
            "title": "Will be mapped to translatable entity by TranslatableSubscriber",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RewardCategory"
              }
            ]
          }
        },
        "type": "object"
      },
      "TranslationsType": {
        "required": [
          "en"
        ],
        "properties": {
          "en": {
            "$ref": "#/components/schemas/LocaleTranslation"
          },
          "pl": {
            "$ref": "#/components/schemas/LocaleTranslation"
          }
        },
        "type": "object"
      },
      "SegmentPartFormType": {
        "properties": {
          "criteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CriterionFormType"
            }
          },
          "segmentPartId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentPart": {
        "properties": {
          "segmentPartId": {
            "type": "string"
          },
          "segment": {
            "$ref": "#/components/schemas/Segment"
          }
        },
        "type": "object"
      },
      "RewardFormType": {
        "required": [
          "name",
          "value",
          "code",
          "startAt",
          "endAt"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "startAt": {
            "type": "string",
            "format": "date"
          },
          "endAt": {
            "type": "string",
            "format": "date"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelType"
            }
          }
        },
        "type": "object"
      },
      "ActivityFormType": {
        "required": [
          "operator"
        ],
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "is_after",
              "is_before",
              "is_between",
              "is_not_between",
              "is_day_of_week",
              "is_month_of_year",
              "is_day_of_month",
              "is_time_between"
            ]
          }
        },
        "type": "object"
      },
      "RuleFormType": {
        "required": [
          "trigger",
          "type",
          "completeRule",
          "translations"
        ],
        "properties": {
          "trigger": {
            "type": "string",
            "enum": [
              "transaction",
              "custom_event"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "direct",
              "referral"
            ]
          },
          "completeRule": {
            "$ref": "#/components/schemas/CompleteRuleFormType"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitFormType"
          },
          "translations": {
            "$ref": "#/components/schemas/RuleTranslationFormType"
          }
        },
        "type": "object"
      },
      "LimitFormType": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer"
          },
          "interval": {
            "$ref": "#/components/schemas/IntervalFormType"
          }
        },
        "type": "object"
      },
      "WebhookHeaderFormType": {
        "required": [
          "headerName",
          "headerValue"
        ],
        "properties": {
          "headerName": {
            "type": "string"
          },
          "headerValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WalletTypeBasicData": {
        "properties": {
          "walletTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "unitSingularName": {
            "type": "string"
          },
          "unitPluralName": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          }
        },
        "type": "object"
      },
      "Account2": {
        "properties": {
          "earnedUnits": {
            "type": "number",
            "format": "float"
          },
          "transferredUnits": {
            "type": "number",
            "format": "float"
          },
          "spentUnits": {
            "type": "number",
            "format": "float"
          },
          "activeUnits": {
            "type": "number",
            "format": "float"
          },
          "lockedUnits": {
            "type": "number",
            "format": "float"
          },
          "blockedUnits": {
            "type": "number",
            "format": "float"
          },
          "expiredUnits": {
            "type": "number",
            "format": "float"
          }
        },
        "type": "object"
      },
      "SingleViewHeader": {
        "properties": {
          "totalEngagement": {
            "type": "integer"
          },
          "engagedMembers": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WebhookHeader": {
        "properties": {
          "headerName": {
            "type": "string"
          },
          "headerValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Limit2": {
        "properties": {
          "interval": {
            "$ref": "#/components/schemas/LimitInterval"
          },
          "value": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Rule2": {
        "properties": {
          "translations": {
            "properties": {
              "en": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "achievementRuleId": {
            "type": "string"
          },
          "completeRule": {
            "$ref": "#/components/schemas/CompleteRule"
          },
          "aggregation": {
            "$ref": "#/components/schemas/Aggregation"
          },
          "uniqueReferee": {
            "type": "boolean"
          },
          "event": {
            "type": "string"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit2"
          }
        },
        "type": "object"
      },
      "PatchRuleFormType": {
        "required": [
          "achievementRuleId"
        ],
        "properties": {
          "achievementRuleId": {
            "type": "string"
          },
          "translations": {
            "$ref": "#/components/schemas/RuleTranslationFormType"
          }
        },
        "type": "object"
      },
      "Activity": {
        "properties": {
          "startsAt": {
            "type": "string",
            "format": "date-time"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "Translation": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProgressRuleFormType": {
        "type": "object"
      },
      "ProcessImportResult": {
        "properties": {
        },
        "type": "object"
      },
      "LocaleTranslation": {
        "type": "object"
      },
      "CriterionFormType": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bought_through_channel",
              "transaction_count",
              "average_transaction_amount",
              "transaction_percent_in_channel",
              "purchase_period",
              "bought_labels",
              "bought_makers",
              "anniversary",
              "last_purchase_n_days_before",
              "last_transaction_between_days",
              "last_custom_event_n_days_before",
              "last_custom_event_between_days",
              "bought_skus",
              "transaction_amount",
              "transaction_amount_each_day_in_period",
              "transaction_amount_in_period",
              "transaction_count_in_period",
              "transaction_amount_each_day_in_last_n_days",
              "transaction_amount_in_last_n_days",
              "customer_in_level",
              "customer_has_labels",
              "customer_with_labels_values",
              "customer_list",
              "gender",
              "city",
              "province",
              "country",
              "postal",
              "age",
              "campaign_completion",
              "customer_csv_list",
              "achievement_completion_count",
              "achievement_rule_progress",
              "customer_in_tiers",
              "member_registration_date"
            ]
          },
          "criterionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelType": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompleteRuleFormType": {
        "required": [
          "period",
          "periodGoal"
        ],
        "properties": {
          "period": {
            "$ref": "#/components/schemas/PeriodFormType"
          },
          "periodGoal": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "RuleTranslationFormType": {
        "required": [
          "en"
        ],
        "properties": {
          "en": {
            "$ref": "#/components/schemas/FormType"
          }
        },
        "type": "object"
      },
      "IntervalFormType": {
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "calendarHours",
              "calendarDays",
              "calendarWeeks",
              "calendarMonths",
              "calendarYears"
            ]
          },
          "value": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Limits": {
        "properties": {
        },
        "type": "object"
      },
      "LimitInterval": {
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CompleteRule": {
        "properties": {
          "periodGoal": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          }
        },
        "type": "object"
      },
      "Aggregation": {
        "properties": {
          "rule": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PeriodFormType": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "overall",
              "year",
              "month",
              "week",
              "day",
              "last_day"
            ]
          }
        },
        "type": "object"
      },
      "Period": {
        "properties": {
          "consecutive": {
            "type": "integer"
          },
          "value": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RewardActivityFormType": {
        "properties": {
          "allTime": {
            "type": "boolean"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RewardVisibilityFormType": {
        "properties": {
          "allTime": {
            "type": "boolean"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "AccessDenied": {
        "description": "Forbidden.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden."
                }
              },
              "type": "object"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message",
                "errors"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Validation failed"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "required": [
                      "message",
                      "parameters",
                      "plural",
                      "code",
                      "path"
                    ],
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "parameters": {
                      },
                      "plural": {
                        "type": "integer",
                        "example": null,
                        "nullable": true
                      },
                      "code": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "NoContent": {
        "description": "Success. No content."
      },
      "NotFound": {
        "description": "Not found.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not Found"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method Not Allowed.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "example": 405
                },
                "message": {
                  "type": "string",
                  "example": "Method Not Allowed."
                }
              },
              "type": "object"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "type": "array",
              "items": {
                "properties": {
                  "name": {
                    "description": "Service name",
                    "type": "string",
                    "example": "PostgreSQL"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "OK",
                      "Problem",
                      "Warning"
                    ]
                  },
                  "message": {
                    "description": "Detailed problem description",
                    "type": "string",
                    "example": "Can't connect to database"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "ExpiredToken": {
        "description": "Expired Token",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Expired JWT Token."
                }
              },
              "type": "object"
            }
          }
        }
      },
      "InvalidToken": {
        "description": "Invalid Token",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid JWT Token"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authentication Required"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "BadCredentials": {
        "description": "Bad credentials.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Bad credentials."
                }
              },
              "type": "object"
            }
          }
        }
      },
      "TokenAndRefreshToken": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6..."
                },
                "refresh_token": {
                  "type": "string",
                  "example": "0558f8bb29948c4e54c443f..."
                }
              },
              "type": "object"
            }
          }
        }
      }
    },
    "parameters": {
      "admin": {
        "name": "admin",
        "in": "path",
        "description": "Admin ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "achievement": {
        "name": "achievement",
        "in": "path",
        "description": "Achievement ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "campaign": {
        "name": "campaign",
        "in": "path",
        "description": "Campaign ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "channel": {
        "name": "channel",
        "in": "path",
        "description": "Channel ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "issuedReward": {
        "name": "issuedReward",
        "in": "path",
        "description": "IssuedReward ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "member": {
        "name": "member",
        "in": "path",
        "description": "Member ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "message": {
        "name": "message",
        "in": "path",
        "description": "Message ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "rewardCategory": {
        "name": "rewardCategory",
        "in": "path",
        "description": "Reward category ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "reward": {
        "name": "reward",
        "in": "path",
        "description": "Reward ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "role": {
        "name": "role",
        "in": "path",
        "description": "Acl role",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "segment": {
        "name": "segment",
        "in": "path",
        "description": "Segment ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "store": {
        "name": "store",
        "in": "path",
        "description": "Store ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "storeCode": {
        "name": "storeCode",
        "in": "path",
        "description": "Store code",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "customEvent": {
        "name": "customEvent",
        "in": "path",
        "description": "Custom Event ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "customEventSchema": {
        "name": "customEventSchema",
        "in": "path",
        "description": "Custom Event Schema",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "choicesType": {
        "name": "type",
        "in": "path",
        "description": "Choices type",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "currency",
            "country",
            "availableFrontendTranslations",
            "availablePointExpireAfter",
            "identificationMethods",
            "issuedRewardStatus",
            "language",
            "timezone"
          ]
        }
      },
      "eventType": {
        "name": "customEventSchema",
        "in": "path",
        "description": "Event type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "export": {
        "name": "export",
        "in": "path",
        "description": "Export ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "webhookSubscription": {
        "name": "subscription",
        "in": "path",
        "description": "Webhook subscription ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "tier": {
        "name": "tier",
        "in": "path",
        "description": "Tier ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "tierSet": {
        "name": "tierSet",
        "in": "path",
        "description": "TierSet ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "transaction": {
        "name": "transaction",
        "in": "path",
        "description": "Transaction ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "transfer": {
        "name": "transfer",
        "in": "path",
        "description": "Points transfer ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "walletType": {
        "name": "walletType",
        "in": "path",
        "description": "WalletType ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "wallet": {
        "name": "wallet",
        "in": "path",
        "description": "Wallet ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "groupOfValues": {
        "name": "groupOfValues",
        "in": "path",
        "description": "GroupOfValues ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "itemsOnPage": {
        "name": "_itemsOnPage",
        "in": "query",
        "description": "Items on one page",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10,
          "maximum": 50,
          "minimum": 1
        },
        "example": 25
      },
      "orderBy": {
        "name": "_orderBy",
        "in": "query",
        "description": "Sorting order. If sorting is not chosen, the rows will be returned in an unspecified order. Sort order: * `asc` - Ascending, from A to Z * `desc` - Descending, from Z to A",
        "required": false,
        "style": "deepObject",
        "explode": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        },
        "example": {
          "fieldName": "desc"
        }
      },
      "page": {
        "name": "_page",
        "in": "query",
        "description": "Number of page with results, starts from 1",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "example": 1
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Open Loyalty has the JWT authorization.\nTo learn what a JSON Web Token is and how it works, check out Introduction to JSON Web Tokens <https://jwt.io/introduction/>\n\n### Obtain an access token\n\nSend a request with the parameters username and password\n\n#### Definition\n\n`POST /api/admin/login_check` [Go to definition](#operation/adminLoginCheck)\\\n`POST /api/{storeCode}/member/login_check` [Go to definition](#operation/memberLoginCheck)\n\n#### Example\n\n```bash\ncurl {HOST}/api/admin/login_check\n    -H 'Content-Type: application/json;charset=UTF-8'\n    -H 'Accept: application/json, text/plain, */*'\n    --data-binary '{\"username\":\"admin\",\"password\":\"password\"}'\n```\n\n#### Example Response\n\n```json\n{\n    \"token\":\"eyJhbGciOiJSUzI1NiIsInR5cCI6...\",\n    \"refresh_token\":\"0558f8bb29948c4e54c443f...\"\n}\n```\n\n### Using JSON Web Token\n\nAdd authorization header to each request\\\n`Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6...`\\\nYou can now access any API method you want under the /api prefix.\n\n#### Example\n```bash\ncurl {HOST}/api/{storeCode}/analytics/members\n    -H 'Accept: application/json'\n    -H 'Content-type: application/x-www-form-urlencoded'\n    -H 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6...'\n```\n\n### Refresh JSON Web Token\nYou can refresh token using refresh_token that was given during login.\\\nThere are two endpoints\\\nTo refresh admin token `POST /api/token/refresh` [Go to definition](#operation/tokenRefresh)\\\nTo refresh member token `POST /api/{storeCode}/token/refresh` [Go to definition](#operation/tokenRefreshMember)\n",
        "name": "Authorization",
        "in": "header",
        "bearerFormat": "JWT",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": [
      ]
    }
  ],
  "tags": [
    {
      "name": "Authorization",
      "description": "These endpoints will allow you to authorize the user."
    },
    {
      "name": "Achievement",
      "description": "These endpoints will allow you to easily manage achievements."
    },
    {
      "name": "ACL",
      "description": "These endpoints will allow you to easily manage access control list."
    },
    {
      "name": "Admin",
      "description": "These endpoints will allow you to easily manage admin users."
    },
    {
      "name": "Analytics",
      "description": "These endpoints will allow you to easily analyze your data in Open Loyalty."
    },
    {
      "name": "Audit",
      "description": "These endpoints will allow you to see the list of actions taken in Open Loyalty."
    },
    {
      "name": "Campaign",
      "description": "These endpoints will allow you to easily manage campaigns."
    },
    {
      "name": "Channels",
      "description": "These endpoints will allow you to easily manage sales channels."
    },
    {
      "name": "Custom Event",
      "description": "These endpoints will allow you to retrieve custom events."
    },
    {
      "name": "Data Analytics",
      "description": "These endpoints will allow you to retrieve data for analytical dashboards and graphs"
    },
    {
      "name": "Export",
      "description": "These endpoints will allow you to export data."
    },
    {
      "name": "HealthCheck",
      "description": "These endpoints will allow you to retrieve information about application version and status."
    },
    {
      "name": "Import",
      "description": "These endpoints will allow you to import data."
    },
    {
      "name": "Language",
      "description": "These endpoints will allow you to easily manage languages and translations."
    },
    {
      "name": "Member",
      "description": "These endpoints allow you to easily manage members."
    },
    {
      "name": "Points",
      "description": "These endpoints allow you to easily manage points and points transfers."
    },
    {
      "name": "Reward",
      "description": "These endpoints allow you to easily manage rewards."
    },
    {
      "name": "Reward category",
      "description": "These endpoints allow you to easily manage rewards categories."
    },
    {
      "name": "Segment",
      "description": "These endpoints allow you to easily manage segments."
    },
    {
      "name": "Settings",
      "description": "These endpoints allow you to easily manage settings."
    },
    {
      "name": "Store",
      "description": "These endpoints allow you to easily manage stores."
    },
    {
      "name": "Tier",
      "description": "These endpoints will allow you to easily manage tiers."
    },
    {
      "name": "Transactions",
      "description": "These endpoints will allow you to easily manage transactions."
    },
    {
      "name": "Wallet",
      "description": "These endpoints will allow you to easily manage wallets and wallet types."
    },
    {
      "name": "Webhook subscription",
      "description": "These endpoints will allow you to easily manage webhooks subscriptions."
    },
    {
      "name": "Group Of Values",
      "description": "These endpoints will allow you to easily manage group of values."
    },
    {
      "name": "Webhook event",
      "description": "This documentation provides information on the data returned by each webhook event."
    },
    {
      "name": "BillableReport",
      "description": "BillableReport"
    }
  ],
  "externalDocs": {
    "description": "Check our User Guide here!",
    "url": "https://help.openloyalty.io/"
  },
  "x-webhooks": {
    "AchievementCreated": {
      "post": {
        "operationId": "AchievementCreated",
        "tags": [
          "Webhook event"
        ],
        "description": "Achievement Created",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "achievement": {
                        "$ref": "#/components/schemas/WebhookAchievement"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "AchievementUpdated": {
      "post": {
        "operationId": "AchievementUpdated",
        "tags": [
          "Webhook event"
        ],
        "description": "Achievement Updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "achievement": {
                        "$ref": "#/components/schemas/WebhookAchievement"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CampaignCreated": {
      "post": {
        "operationId": "CampaignCreated",
        "tags": [
          "Webhook event"
        ],
        "description": "Campaign Created",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "campaign": {
                        "$ref": "#/components/schemas/WebhookCampaign"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CampaignUpdated": {
      "post": {
        "operationId": "CampaignUpdated",
        "tags": [
          "Webhook event"
        ],
        "description": "Campaign Updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "campaign": {
                        "$ref": "#/components/schemas/WebhookCampaign"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "AvailablePointsAmountChanged": {
      "post": {
        "operationId": "AvailablePointsAmountChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "The number of available units on the member's account has changed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "accountId": {
                        "type": "string",
                        "deprecated": true,
                        "description": "same as data.wallet.walletId",
                        "format": "uuid"
                      },
                      "amount": {
                        "type": "number",
                        "format": "float"
                      },
                      "amountChange": {
                        "type": "number",
                        "format": "float"
                      },
                      "amountChangeType": {
                        "type": "string"
                      },
                      "transferId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "00000000-0000-0000-0000-000000000000"
                      },
                      "wallet": {
                        "type": "object",
                        "properties": {
                          "walletId": {
                            "type": "string",
                            "description": "same as data.accountId"
                          },
                          "walletType": {
                            "$ref": "#/components/schemas/WalletType"
                          }
                        }
                      },
                      "actionCause": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/ActionCause"
                          },
                          {
                            "type": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CouponWillExpire": {
      "post": {
        "operationId": "CouponWillExpire",
        "tags": [
          "Webhook event"
        ],
        "description": "Member coupon is about to expire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "issuedCoupon": {
                        "type": "object",
                        "properties": {
                          "valueType": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "value": {
                            "type": "float"
                          },
                          "activeFrom": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "activeTo": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "usedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerBoughtReward": {
      "post": {
        "operationId": "CustomerBoughtReward",
        "tags": [
          "Webhook event"
        ],
        "description": "Member has redeemed a reward",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "coupon": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "value": {
                            "type": "float"
                          },
                          "status": {
                            "type": "string"
                          },
                          "activeFrom": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "activeTo": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "usedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      },
                      "reward": {
                        "type": "object",
                        "properties": {
                          "rewardId": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                          },
                          "rewardName": {
                            "type": "string"
                          },
                          "rewardType": {
                            "type": "string"
                          }
                        }
                      },
                      "rewardRedemption": {
                        "type": "object",
                        "properties": {
                          "redeemedRewardId": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                          }
                        }
                      },
                      "costInPoints": {
                        "type": "float"
                      },
                      "actionCause": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "customerId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          },
                          "campaignId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          },
                          "transactionId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          },
                          "customEventId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          },
                          "internalEventName": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerDeactivated": {
      "post": {
        "operationId": "CustomerDeactivated",
        "tags": [
          "Webhook event"
        ],
        "description": "Member account has been deactivated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerEmailWasChanged": {
      "post": {
        "operationId": "CustomerEmailWasChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "Member email address has been updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "codeNumber": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerLevelChanged": {
      "post": {
        "operationId": "CustomerLevelChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "Member tier has changed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "level": {
                        "type": "object",
                        "properties": {
                          "levelId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "levelMoveUp": {
                            "type": "boolean",
                            "example": true
                          },
                          "levelMoveDown": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerPhoneNumberWasChanged": {
      "post": {
        "operationId": "CustomerPhoneNumberWasChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "Member phone number has been updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "codeNumber": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerRequestedPasswordReset": {
      "post": {
        "operationId": "CustomerRequestedPasswordReset",
        "tags": [
          "Webhook event"
        ],
        "description": "A member has requested a password reset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "codeNumber": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerRequestedSendActivationCode": {
      "post": {
        "operationId": "CustomerRequestedSendActivationCode",
        "tags": [
          "Webhook event"
        ],
        "description": "Member has requested an activation code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "codeNumber": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerUpdated": {
      "post": {
        "operationId": "CustomerUpdated",
        "tags": [
          "Webhook event"
        ],
        "description": "Member profile information has been updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerWasRegisteredWithoutActivation": {
      "post": {
        "operationId": "CustomerWasRegisteredWithoutActivation",
        "tags": [
          "Webhook event"
        ],
        "description": "New member has been registered without activation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "codeNumber": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TransactionAssignedToCustomer": {
      "post": {
        "operationId": "TransactionAssignedToCustomer",
        "tags": [
          "Webhook event"
        ],
        "description": "Transaction has been matched with a member",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "transactionId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "grossValue": {
                        "type": "number",
                        "format": "float"
                      },
                      "customer": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "LevelWillExpire": {
      "post": {
        "operationId": "LevelWillExpire",
        "tags": [
          "Webhook event"
        ],
        "description": "Member tier is about to downgrade",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customerId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "customerEmail": {
                        "type": "string"
                      },
                      "customerPhone": {
                        "type": "string"
                      },
                      "customerLoyaltyCardNumber": {
                        "type": "string"
                      },
                      "customerFirstName": {
                        "type": "string"
                      },
                      "customerLastName": {
                        "type": "string"
                      },
                      "levelId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "levelName": {
                        "type": "string"
                      },
                      "futureLevelId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "futureLevelName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "PointsWillExpire": {
      "post": {
        "operationId": "PointsWillExpire",
        "tags": [
          "Webhook event"
        ],
        "description": "Units on a member account are about to expire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "points": {
                        "type": "number",
                        "format": "float"
                      },
                      "pointsWillExpire": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CustomerRegistered": {
      "post": {
        "operationId": "CustomerRegistered",
        "tags": [
          "Webhook event"
        ],
        "description": "New member has registered",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "customerId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "customerData": {
                        "type": "object",
                        "properties": {
                          "referralToken": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "gender": {
                            "type": "string"
                          },
                          "birthDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "registeredAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "address": {
                            "$ref": "#/components/schemas/CustomerAddressFormType"
                          },
                          "company": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "nip": {
                                "type": "string"
                              }
                            }
                          },
                          "loyaltyCardNumber": {
                            "type": "string"
                          },
                          "customAttributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "mixed"
                                }
                              }
                            }
                          },
                          "agreement1": {
                            "type": "boolean"
                          },
                          "agreement2": {
                            "type": "boolean"
                          },
                          "agreement3": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TransactionRegistered": {
      "post": {
        "operationId": "TransactionRegistered",
        "tags": [
          "Webhook event"
        ],
        "description": "Transaction has been registered",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "transactionId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "documentNumber": {
                        "type": "string"
                      },
                      "purchasedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "documentType": {
                        "type": "string"
                      },
                      "customerData": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "nip": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "loyaltyCardNumber": {
                            "type": "string"
                          },
                          "address": {
                            "$ref": "#/components/schemas/CustomerAddressFormType"
                          }
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "sku": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "name": {
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            },
                            "grossValue": {
                              "type": "float"
                            },
                            "category": {
                              "type": "string"
                            },
                            "maker": {
                              "type": "string"
                            },
                            "labels": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "mixed"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "channelId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "RewardRedemptionStatusChanged": {
      "post": {
        "operationId": "RewardRedemptionStatusChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "Reward redemption status has changed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "issuedReward": {
                        "type": "object",
                        "properties": {
                          "issuedRewardId": {
                            "type": "string"
                          },
                          "token": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "customerId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "costInPoints": {
                            "type": "float"
                          },
                          "tax": {
                            "type": "float"
                          },
                          "taxPriceValue": {
                            "type": "float"
                          },
                          "price": {
                            "type": "float"
                          },
                          "redemptionDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "customerData": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "firstName": {
                                "type": "string"
                              },
                              "lastName": {
                                "type": "string"
                              },
                              "companyName": {
                                "type": "string"
                              },
                              "nip": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "loyaltyCardNumber": {
                                "type": "string"
                              },
                              "address": {
                                "$ref": "#/components/schemas/CustomerAddressFormType"
                              }
                            }
                          },
                          "rewardType": {
                            "type": "string"
                          },
                          "rewardId": {
                            "type": "string"
                          },
                          "issuedCoupon": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "value": {
                                "type": "float"
                              },
                              "activeFrom": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "activeTo": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      },
                      "newStatus": {
                        "type": "string"
                      },
                      "newComment": {
                        "type": "string"
                      },
                      "newDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "oldStatus": {
                        "type": "string"
                      },
                      "oldComment": {
                        "type": "string"
                      },
                      "oldDate": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "RewardCreated": {
      "post": {
        "operationId": "RewardCreated",
        "tags": [
          "Webhook event"
        ],
        "description": "Reward Created",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "reward": {
                        "$ref": "#/components/schemas/WebhookReward"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "RewardUpdated": {
      "post": {
        "operationId": "RewardUpdated",
        "tags": [
          "Webhook event"
        ],
        "description": "Reward Updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook event"
                  },
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "reward": {
                        "$ref": "#/components/schemas/WebhookReward"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CampaignEffectWasApplied": {
      "post": {
        "operationId": "CampaignEffectWasApplied",
        "tags": [
          "Webhook event"
        ],
        "description": "Campaign effect has been applied to a member account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "member": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "campaign": {
                        "$ref": "#/components/schemas/WebhookCampaign"
                      },
                      "effectsGiven": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WebhookCampaignEffect"
                        }
                      },
                      "redemptionCode": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MemberAchievementProgressWasChanged": {
      "post": {
        "operationId": "MemberAchievementProgressWasChanged",
        "tags": [
          "Webhook event"
        ],
        "description": "Member achievement progress has changed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "member": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "achievement": {
                        "type": "object",
                        "properties": {
                          "achievementId": {
                            "type": "string"
                          },
                          "achievementName": {
                            "type": "string"
                          },
                          "limitReached": {
                            "type": "boolean"
                          },
                          "manuallyEdited": {
                            "type": "boolean"
                          },
                          "memberProgress": {
                            "type": "object",
                            "properties": {
                              "completedCount": {
                                "type": "integer"
                              },
                              "reset": {
                                "type": "boolean"
                              },
                              "rules": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "achievementRuleId": {
                                      "type": "string"
                                    },
                                    "periodGoal": {
                                      "type": "float"
                                    },
                                    "currentPeriodValue": {
                                      "type": "float"
                                    },
                                    "periodType": {
                                      "type": "string"
                                    },
                                    "consecutivePeriods": {
                                      "type": "integer",
                                      "nullable": true
                                    },
                                    "completedConsecutivePeriods": {
                                      "type": "integer"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "trigger": {
                                      "type": "string",
                                      "enum": [
                                        "transaction",
                                        "custom_event"
                                      ]
                                    },
                                    "translations": {
                                      "$ref": "#/components/schemas/Translations"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "previousMemberProgress": {
                            "type": "object",
                            "properties": {
                              "completedCount": {
                                "type": "integer"
                              },
                              "rules": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "achievementRuleId": {
                                      "type": "string"
                                    },
                                    "periodGoal": {
                                      "type": "float"
                                    },
                                    "currentPeriodValue": {
                                      "type": "float"
                                    },
                                    "periodType": {
                                      "type": "string"
                                    },
                                    "consecutivePeriods": {
                                      "type": "integer",
                                      "nullable": true
                                    },
                                    "completedConsecutivePeriods": {
                                      "type": "integer"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "trigger": {
                                      "type": "string",
                                      "enum": [
                                        "transaction",
                                        "custom_event"
                                      ]
                                    },
                                    "translations": {
                                      "$ref": "#/components/schemas/Translations"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "triggerType": {
                        "type": "string",
                        "deprecated": true,
                        "enum": [
                          "transaction",
                          "custom_event"
                        ]
                      },
                      "trigger": {
                        "type": "object",
                        "properties": {
                          "triggerId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "transaction",
                              "custom_event"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    },
    "UnitsTransferWasAdded": {
      "post": {
        "operationId": "UnitsTransferWasAdded",
        "tags": [
          "Webhook event"
        ],
        "description": "Units transfer has been added",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for each webhook send"
                  },
                  "eventName": {
                    "type": "string"
                  },
                  "storeCode": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "member": {
                        "$ref": "#/components/schemas/WebhookCustomer"
                      },
                      "wallet": {
                        "type": "object",
                        "properties": {
                          "walletId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "same as data.accountId"
                          },
                          "walletType": {
                            "$ref": "#/components/schemas/WalletType"
                          }
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "expiresAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "units": {
                        "type": "number",
                        "format": "float"
                      },
                      "comment": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "adding",
                          "spending",
                          "p2p_adding",
                          "p2p_spending",
                          "blocked",
                          "expired"
                        ]
                      },
                      "pending": {
                        "type": "boolean"
                      },
                      "lockedUntil": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "transferId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "relatedTransferId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Only for transfers with type 'expired'"
                      },
                      "actionCause": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/ActionCause"
                          },
                          {
                            "type": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        }
      }
    }
  }
}